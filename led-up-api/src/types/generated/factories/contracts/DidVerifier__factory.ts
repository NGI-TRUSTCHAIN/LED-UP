/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  DidVerifier,
  DidVerifierInterface,
} from "../../contracts/DidVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_didRegistryAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DidVerifier__InvalidCredential",
    type: "error",
  },
  {
    inputs: [],
    name: "DidVerifier__InvalidIssuer",
    type: "error",
  },
  {
    inputs: [],
    name: "DidVerifier__UntrustedIssuer",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "credentialType",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "issuer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "trusted",
        type: "bool",
      },
    ],
    name: "IssuerTrustStatusUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "credentialType",
        type: "string",
      },
      {
        internalType: "address",
        name: "issuer",
        type: "address",
      },
    ],
    name: "isIssuerTrusted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "credentialType",
        type: "string",
      },
      {
        internalType: "address",
        name: "issuer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "trusted",
        type: "bool",
      },
    ],
    name: "setIssuerTrustStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "credentialType",
        type: "string",
      },
      {
        internalType: "address",
        name: "issuer",
        type: "address",
      },
      {
        internalType: "string",
        name: "subject",
        type: "string",
      },
    ],
    name: "verifyCredential",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608034607057601f61043e38819003918201601f19168301916001600160401b03831184841017607557808492602094604052833981010312607057516001600160a01b03811690819003607057600080546001600160a01b0319169190911790556040516103b2908161008c8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081631e5eeaa81461018e5750806362a26095146101255763c5d3dfdc1461004057600080fd5b346101205760603660031901126101205760043567ffffffffffffffff8111610120576100719036906004016102fe565b9061007a61032c565b9160443592831515809403610120576001600160a01b0316801561010f577fd2e1d4f584e888810ad1218b5e66bca9f700e1f9a65274148eb7d9055692fead9360405183858237602081858101600181520301902082600052602052604060002060ff1981541660ff83161790556100ff604051948594606086526060860191610342565b91602084015260408301520390a1005b636e26482160e11b60005260046000fd5b600080fd5b346101205760403660031901126101205760043567ffffffffffffffff81116101205761015961016a9136906004016102fe565b61016492919261032c565b92610363565b9060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346101205760603660031901126101205760043567ffffffffffffffff8111610120576101bf9036906004016102fe565b6101c761032c565b9260443567ffffffffffffffff8111610120578161021a81806101f060209536906004016102fe565b60005463c8902a2160e01b8452600484018890526001600160a01b03169491602484019190610342565b03915afa9081156102f257600091610286575b50156102755761023c91610363565b9060018060a01b031660005260205260ff604060002054161561026457602060405160018152f35b636e5d524560e11b60005260046000fd5b630967603b60e31b60005260046000fd5b60203d6020116102eb575b601f8101601f1916820167ffffffffffffffff8111838210176102d7576020918391604052810103126102d357519081151582036102d057508461022d565b80fd5b5080fd5b634e487b7160e01b84526041600452602484fd5b503d610291565b6040513d6000823e3d90fd5b9181601f840112156101205782359167ffffffffffffffff8311610120576020838186019501011161012057565b602435906001600160a01b038216820361012057565b908060209392818452848401376000828201840152601f01601f1916010190565b602090826040519384928337810160018152030190209056fea26469706673582212208a90349bfc32e8a5441859cc0b27ba1fb0a8870fe99e5eb09db5428ecd8a09e164736f6c634300081c0033";

type DidVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DidVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DidVerifier__factory extends ContractFactory {
  constructor(...args: DidVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _didRegistryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_didRegistryAddress, overrides || {});
  }
  override deploy(
    _didRegistryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_didRegistryAddress, overrides || {}) as Promise<
      DidVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DidVerifier__factory {
    return super.connect(runner) as DidVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DidVerifierInterface {
    return new Interface(_abi) as DidVerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DidVerifier {
    return new Contract(address, _abi, runner) as unknown as DidVerifier;
  }
}
