/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DidIssuerInterface extends Interface {
  getFunction(
    nameOrSignature: "isCredentialValid" | "issueCredential"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CredentialIssued"): EventFragment;

  encodeFunctionData(
    functionFragment: "isCredentialValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueCredential",
    values: [string, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "isCredentialValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCredential",
    data: BytesLike
  ): Result;
}

export namespace CredentialIssuedEvent {
  export type InputTuple = [
    credentialType: string,
    subject: string,
    credentialId: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    credentialType: string,
    subject: string,
    credentialId: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    credentialType: string;
    subject: string;
    credentialId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DidIssuer extends BaseContract {
  connect(runner?: ContractRunner | null): DidIssuer;
  waitForDeployment(): Promise<this>;

  interface: DidIssuerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isCredentialValid: TypedContractMethod<
    [credentialId: BytesLike],
    [boolean],
    "view"
  >;

  issueCredential: TypedContractMethod<
    [credentialType: string, subject: string, credentialId: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isCredentialValid"
  ): TypedContractMethod<[credentialId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "issueCredential"
  ): TypedContractMethod<
    [credentialType: string, subject: string, credentialId: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CredentialIssued"
  ): TypedContractEvent<
    CredentialIssuedEvent.InputTuple,
    CredentialIssuedEvent.OutputTuple,
    CredentialIssuedEvent.OutputObject
  >;

  filters: {
    "CredentialIssued(string,string,bytes32,uint256)": TypedContractEvent<
      CredentialIssuedEvent.InputTuple,
      CredentialIssuedEvent.OutputTuple,
      CredentialIssuedEvent.OutputObject
    >;
    CredentialIssued: TypedContractEvent<
      CredentialIssuedEvent.InputTuple,
      CredentialIssuedEvent.OutputTuple,
      CredentialIssuedEvent.OutputObject
    >;
  };
}
