/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DidRegistry {
  export type DIDDocumentStruct = {
    subject: AddressLike;
    lastUpdated: BigNumberish;
    active: boolean;
    publicKey: string;
    document: string;
  };

  export type DIDDocumentStructOutput = [
    subject: string,
    lastUpdated: bigint,
    active: boolean,
    publicKey: string,
    document: string
  ] & {
    subject: string;
    lastUpdated: bigint;
    active: boolean;
    publicKey: string;
    document: string;
  };
}

export interface DidRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addressToDID"
      | "deactivateDid"
      | "getController"
      | "getDocument"
      | "getDocumentForDid"
      | "getLastUpdated"
      | "getLastUpdatedForDid"
      | "getPublicKey"
      | "getPublicKeyForDid"
      | "getSubject"
      | "getSubjectForDid"
      | "isActive"
      | "isActiveForDid"
      | "registerDid"
      | "resolveDid"
      | "updateDidDocument"
      | "updateDidPublicKey"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DIDDeactivated" | "DIDRegistered" | "DIDUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addressToDID",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateDid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getDocument", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDocumentForDid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdatedForDid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKeyForDid",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getSubject", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSubjectForDid",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isActiveForDid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDid",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "resolveDid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateDidDocument",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDidPublicKey",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressToDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentForDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdatedForDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKeyForDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSubject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubjectForDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isActiveForDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolveDid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDidDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDidPublicKey",
    data: BytesLike
  ): Result;
}

export namespace DIDDeactivatedEvent {
  export type InputTuple = [did: string, timestamp: BigNumberish];
  export type OutputTuple = [did: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDRegisteredEvent {
  export type InputTuple = [did: string, controller: AddressLike];
  export type OutputTuple = [did: string, controller: string];
  export interface OutputObject {
    did: string;
    controller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDUpdatedEvent {
  export type InputTuple = [did: string, timestamp: BigNumberish];
  export type OutputTuple = [did: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DidRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DidRegistry;
  waitForDeployment(): Promise<this>;

  interface: DidRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addressToDID: TypedContractMethod<[addr: AddressLike], [string], "view">;

  deactivateDid: TypedContractMethod<[did: string], [void], "nonpayable">;

  getController: TypedContractMethod<[did: string], [string], "view">;

  getDocument: TypedContractMethod<[did: string], [string], "view">;

  getDocumentForDid: TypedContractMethod<[did: string], [string], "view">;

  getLastUpdated: TypedContractMethod<[did: string], [bigint], "view">;

  getLastUpdatedForDid: TypedContractMethod<[did: string], [bigint], "view">;

  getPublicKey: TypedContractMethod<[did: string], [string], "view">;

  getPublicKeyForDid: TypedContractMethod<[did: string], [string], "view">;

  getSubject: TypedContractMethod<[did: string], [string], "view">;

  getSubjectForDid: TypedContractMethod<[did: string], [string], "view">;

  isActive: TypedContractMethod<[did: string], [boolean], "view">;

  isActiveForDid: TypedContractMethod<[did: string], [boolean], "view">;

  registerDid: TypedContractMethod<
    [did: string, document: string, publicKey: string],
    [void],
    "nonpayable"
  >;

  resolveDid: TypedContractMethod<
    [did: string],
    [DidRegistry.DIDDocumentStructOutput],
    "view"
  >;

  updateDidDocument: TypedContractMethod<
    [did: string, newDocument: string],
    [void],
    "nonpayable"
  >;

  updateDidPublicKey: TypedContractMethod<
    [did: string, newPublicKey: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addressToDID"
  ): TypedContractMethod<[addr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "deactivateDid"
  ): TypedContractMethod<[did: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getController"
  ): TypedContractMethod<[did: string], [string], "view">;
  getFunction(
    nameOrSignature: "getDocument"
  ): TypedContractMethod<[did: string], [string], "view">;
  getFunction(
    nameOrSignature: "getDocumentForDid"
  ): TypedContractMethod<[did: string], [string], "view">;
  getFunction(
    nameOrSignature: "getLastUpdated"
  ): TypedContractMethod<[did: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastUpdatedForDid"
  ): TypedContractMethod<[did: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPublicKey"
  ): TypedContractMethod<[did: string], [string], "view">;
  getFunction(
    nameOrSignature: "getPublicKeyForDid"
  ): TypedContractMethod<[did: string], [string], "view">;
  getFunction(
    nameOrSignature: "getSubject"
  ): TypedContractMethod<[did: string], [string], "view">;
  getFunction(
    nameOrSignature: "getSubjectForDid"
  ): TypedContractMethod<[did: string], [string], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[did: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isActiveForDid"
  ): TypedContractMethod<[did: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerDid"
  ): TypedContractMethod<
    [did: string, document: string, publicKey: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveDid"
  ): TypedContractMethod<
    [did: string],
    [DidRegistry.DIDDocumentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateDidDocument"
  ): TypedContractMethod<
    [did: string, newDocument: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDidPublicKey"
  ): TypedContractMethod<
    [did: string, newPublicKey: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DIDDeactivated"
  ): TypedContractEvent<
    DIDDeactivatedEvent.InputTuple,
    DIDDeactivatedEvent.OutputTuple,
    DIDDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "DIDRegistered"
  ): TypedContractEvent<
    DIDRegisteredEvent.InputTuple,
    DIDRegisteredEvent.OutputTuple,
    DIDRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DIDUpdated"
  ): TypedContractEvent<
    DIDUpdatedEvent.InputTuple,
    DIDUpdatedEvent.OutputTuple,
    DIDUpdatedEvent.OutputObject
  >;

  filters: {
    "DIDDeactivated(string,uint256)": TypedContractEvent<
      DIDDeactivatedEvent.InputTuple,
      DIDDeactivatedEvent.OutputTuple,
      DIDDeactivatedEvent.OutputObject
    >;
    DIDDeactivated: TypedContractEvent<
      DIDDeactivatedEvent.InputTuple,
      DIDDeactivatedEvent.OutputTuple,
      DIDDeactivatedEvent.OutputObject
    >;

    "DIDRegistered(string,address)": TypedContractEvent<
      DIDRegisteredEvent.InputTuple,
      DIDRegisteredEvent.OutputTuple,
      DIDRegisteredEvent.OutputObject
    >;
    DIDRegistered: TypedContractEvent<
      DIDRegisteredEvent.InputTuple,
      DIDRegisteredEvent.OutputTuple,
      DIDRegisteredEvent.OutputObject
    >;

    "DIDUpdated(string,uint256)": TypedContractEvent<
      DIDUpdatedEvent.InputTuple,
      DIDUpdatedEvent.OutputTuple,
      DIDUpdatedEvent.OutputObject
    >;
    DIDUpdated: TypedContractEvent<
      DIDUpdatedEvent.InputTuple,
      DIDUpdatedEvent.OutputTuple,
      DIDUpdatedEvent.OutputObject
    >;
  };
}
