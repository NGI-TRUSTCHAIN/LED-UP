/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../common';

export declare namespace IDataRegistry {
  export type HealthRecordStruct = {
    signature: BytesLike;
    resourceType: string;
    cid: string;
    url: string;
    hash: BytesLike;
    isVerified: boolean;
  };

  export type HealthRecordStructOutput = [
    signature: string,
    resourceType: string,
    cid: string,
    url: string,
    hash: string,
    isVerified: boolean,
  ] & {
    signature: string;
    resourceType: string;
    cid: string;
    url: string;
    hash: string;
    isVerified: boolean;
  };

  export type DataRecordCoreStruct = {
    ownerDid: string;
    producer: AddressLike;
    status: BigNumberish;
    consent: BigNumberish;
    isActive: boolean;
    updatedAt: BigNumberish;
    nonce: BigNumberish;
  };

  export type DataRecordCoreStructOutput = [
    ownerDid: string,
    producer: string,
    status: bigint,
    consent: bigint,
    isActive: boolean,
    updatedAt: bigint,
    nonce: bigint,
  ] & {
    ownerDid: string;
    producer: string;
    status: bigint;
    consent: bigint;
    isActive: boolean;
    updatedAt: bigint;
    nonce: bigint;
  };

  export type MetadataStruct = { url: string; hash: BytesLike };

  export type MetadataStructOutput = [url: string, hash: string] & {
    url: string;
    hash: string;
  };

  export type SchemaStruct = { schemaRef: IDataRegistry.MetadataStruct };

  export type SchemaStructOutput = [schemaRef: IDataRegistry.MetadataStructOutput] & {
    schemaRef: IDataRegistry.MetadataStructOutput;
  };

  export type RecordMetadataStruct = {
    cid: string;
    url: string;
    hash: BytesLike;
  };

  export type RecordMetadataStructOutput = [cid: string, url: string, hash: string] & {
    cid: string;
    url: string;
    hash: string;
  };
}

export interface DataRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'changePauseState'
      | 'changeTokenAddress'
      | 'didAuth'
      | 'getAddressFromDid'
      | 'getCompensationContractAddress'
      | 'getProducerConsent'
      | 'getProducerDid'
      | 'getProducerRecord'
      | 'getProducerRecordCount'
      | 'getProducerRecordInfo'
      | 'getProducerRecordStatus'
      | 'getProducerRecords'
      | 'getProviderMetadata'
      | 'getRecordCid'
      | 'getRecordSchema'
      | 'getTotalRecordsCount'
      | 'isConsumerAuthorized'
      | 'owner'
      | 'paused'
      | 'producerExists'
      | 'registerProducerRecord'
      | 'removeProducerRecord'
      | 'renounceOwnership'
      | 'shareData'
      | 'transferOwnership'
      | 'updateDidAuthAddress'
      | 'updateProducerConsent'
      | 'updateProducerRecord'
      | 'updateProducerRecordMetadata'
      | 'updateProducerRecordStatus'
      | 'updateProviderMetadata'
      | 'updateProviderRecordSchema'
      | 'verifyData'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'AccessNotAllowed'
      | 'ConsumerAuthorized'
      | 'ConsumerDeauthorized'
      | 'DataDeactivated'
      | 'DataRegistered'
      | 'DataRemoved'
      | 'DataShared'
      | 'DataUpdated'
      | 'DataVerified'
      | 'MetadataUpdated'
      | 'OwnershipTransferred'
      | 'PauseStateUpdated'
      | 'Paused'
      | 'ProducerConsentUpdated'
      | 'ProducerRecordRemoved'
      | 'ProducerRecordStatusUpdated'
      | 'ProducerRecordUpdated'
      | 'ProviderMetadataUpdated'
      | 'ProviderSchemaUpdated'
      | 'SharingNotAllowed'
      | 'TokenAddressUpdated'
      | 'TokenUpdated'
      | 'Unpaused'
  ): EventFragment;

  encodeFunctionData(functionFragment: 'changePauseState', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'changeTokenAddress', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'didAuth', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAddressFromDid', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getCompensationContractAddress',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'getProducerConsent', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'getProducerDid', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'getProducerRecord', values: [AddressLike, string]): string;
  encodeFunctionData(functionFragment: 'getProducerRecordCount', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'getProducerRecordInfo', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'getProducerRecordStatus', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'getProducerRecords', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'getProviderMetadata', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRecordCid', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getRecordSchema', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalRecordsCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isConsumerAuthorized', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'producerExists', values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'registerProducerRecord',
    values: [
      string,
      string,
      AddressLike,
      BytesLike,
      string,
      BigNumberish,
      IDataRegistry.RecordMetadataStruct,
    ]
  ): string;
  encodeFunctionData(functionFragment: 'removeProducerRecord', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'shareData', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'updateDidAuthAddress', values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: 'updateProducerConsent',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProducerRecord',
    values: [
      string,
      AddressLike,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      IDataRegistry.RecordMetadataStruct,
      string,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProducerRecordMetadata',
    values: [AddressLike, string, IDataRegistry.RecordMetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProducerRecordStatus',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProviderMetadata',
    values: [IDataRegistry.MetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateProviderRecordSchema',
    values: [IDataRegistry.SchemaStruct]
  ): string;
  encodeFunctionData(functionFragment: 'verifyData', values: [string, string]): string;

  decodeFunctionResult(functionFragment: 'changePauseState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'didAuth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAddressFromDid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCompensationContractAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProducerConsent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProducerDid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProducerRecord', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProducerRecordCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProducerRecordInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProducerRecordStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProducerRecords', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProviderMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRecordCid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRecordSchema', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalRecordsCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isConsumerAuthorized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'producerExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerProducerRecord', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeProducerRecord', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shareData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDidAuthAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProducerConsent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProducerRecord', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProducerRecordMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProducerRecordStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProviderMetadata', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProviderRecordSchema', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyData', data: BytesLike): Result;
}

export namespace AccessNotAllowedEvent {
  export type InputTuple = [recordId: string, consumerDid: string];
  export type OutputTuple = [recordId: string, consumerDid: string];
  export interface OutputObject {
    recordId: string;
    consumerDid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsumerAuthorizedEvent {
  export type InputTuple = [recordId: string, ownerDid: string, consumerDid: string];
  export type OutputTuple = [recordId: string, ownerDid: string, consumerDid: string];
  export interface OutputObject {
    recordId: string;
    ownerDid: string;
    consumerDid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsumerDeauthorizedEvent {
  export type InputTuple = [recordId: string, consumerDid: string];
  export type OutputTuple = [recordId: string, consumerDid: string];
  export interface OutputObject {
    recordId: string;
    consumerDid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataDeactivatedEvent {
  export type InputTuple = [recordId: string, timestamp: BigNumberish];
  export type OutputTuple = [recordId: string, timestamp: bigint];
  export interface OutputObject {
    recordId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataRegisteredEvent {
  export type InputTuple = [recordId: string, ownerDid: string, cid: string, hash: BytesLike];
  export type OutputTuple = [recordId: string, ownerDid: string, cid: string, hash: string];
  export interface OutputObject {
    recordId: string;
    ownerDid: string;
    cid: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataRemovedEvent {
  export type InputTuple = [producer: AddressLike, recordId: string];
  export type OutputTuple = [producer: string, recordId: string];
  export interface OutputObject {
    producer: string;
    recordId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataSharedEvent {
  export type InputTuple = [
    producer: AddressLike,
    consumer: AddressLike,
    recordId: string,
    cid: string,
  ];
  export type OutputTuple = [producer: string, consumer: string, recordId: string, cid: string];
  export interface OutputObject {
    producer: string;
    consumer: string;
    recordId: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataUpdatedEvent {
  export type InputTuple = [producer: AddressLike, recordId: string, cid: string, hash: BytesLike];
  export type OutputTuple = [producer: string, recordId: string, cid: string, hash: string];
  export interface OutputObject {
    producer: string;
    recordId: string;
    cid: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataVerifiedEvent {
  export type InputTuple = [recordId: string, verifierDid: string];
  export type OutputTuple = [recordId: string, verifierDid: string];
  export interface OutputObject {
    recordId: string;
    verifierDid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [url: string, hash: BytesLike];
  export type OutputTuple = [url: string, hash: string];
  export interface OutputObject {
    url: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseStateUpdatedEvent {
  export type InputTuple = [contractAddress: AddressLike, caller: AddressLike, isPaused: boolean];
  export type OutputTuple = [contractAddress: string, caller: string, isPaused: boolean];
  export interface OutputObject {
    contractAddress: string;
    caller: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProducerConsentUpdatedEvent {
  export type InputTuple = [producer: AddressLike, status: BigNumberish];
  export type OutputTuple = [producer: string, status: bigint];
  export interface OutputObject {
    producer: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProducerRecordRemovedEvent {
  export type InputTuple = [producer: AddressLike];
  export type OutputTuple = [producer: string];
  export interface OutputObject {
    producer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProducerRecordStatusUpdatedEvent {
  export type InputTuple = [producer: AddressLike, status: BigNumberish];
  export type OutputTuple = [producer: string, status: bigint];
  export interface OutputObject {
    producer: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProducerRecordUpdatedEvent {
  export type InputTuple = [producer: AddressLike, recordId: string, cid: string, hash: BytesLike];
  export type OutputTuple = [producer: string, recordId: string, cid: string, hash: string];
  export interface OutputObject {
    producer: string;
    recordId: string;
    cid: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderMetadataUpdatedEvent {
  export type InputTuple = [url: string, hash: BytesLike];
  export type OutputTuple = [url: string, hash: string];
  export interface OutputObject {
    url: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderSchemaUpdatedEvent {
  export type InputTuple = [url: string, hash: BytesLike];
  export type OutputTuple = [url: string, hash: string];
  export interface OutputObject {
    url: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharingNotAllowedEvent {
  export type InputTuple = [recordId: string, producerDid: string];
  export type OutputTuple = [recordId: string, producerDid: string];
  export interface OutputObject {
    recordId: string;
    producerDid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddressUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenUpdatedEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DataRegistry;
  waitForDeployment(): Promise<this>;

  interface: DataRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  changePauseState: TypedContractMethod<[_pause: boolean], [void], 'nonpayable'>;

  changeTokenAddress: TypedContractMethod<[_tokenAddress: AddressLike], [void], 'nonpayable'>;

  didAuth: TypedContractMethod<[], [string], 'view'>;

  getAddressFromDid: TypedContractMethod<[did: string], [string], 'view'>;

  getCompensationContractAddress: TypedContractMethod<[], [string], 'view'>;

  getProducerConsent: TypedContractMethod<[_address: AddressLike], [bigint], 'view'>;

  getProducerDid: TypedContractMethod<[_producer: AddressLike], [string], 'view'>;

  getProducerRecord: TypedContractMethod<
    [_producer: AddressLike, _recordId: string],
    [IDataRegistry.HealthRecordStructOutput],
    'view'
  >;

  getProducerRecordCount: TypedContractMethod<[_producer: AddressLike], [bigint], 'view'>;

  getProducerRecordInfo: TypedContractMethod<
    [_producer: AddressLike],
    [IDataRegistry.DataRecordCoreStructOutput],
    'view'
  >;

  getProducerRecordStatus: TypedContractMethod<[_producer: AddressLike], [bigint], 'view'>;

  getProducerRecords: TypedContractMethod<
    [_producer: AddressLike],
    [[bigint, bigint, IDataRegistry.HealthRecordStructOutput[], string[], bigint]],
    'view'
  >;

  getProviderMetadata: TypedContractMethod<[], [IDataRegistry.MetadataStructOutput], 'view'>;

  getRecordCid: TypedContractMethod<
    [recordId: string, requesterDid: string],
    [string],
    'nonpayable'
  >;

  getRecordSchema: TypedContractMethod<[], [IDataRegistry.SchemaStructOutput], 'view'>;

  getTotalRecordsCount: TypedContractMethod<[], [bigint], 'view'>;

  isConsumerAuthorized: TypedContractMethod<
    [recordId: string, consumerDid: string],
    [boolean],
    'view'
  >;

  owner: TypedContractMethod<[], [string], 'view'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  producerExists: TypedContractMethod<[_producer: AddressLike], [boolean], 'view'>;

  registerProducerRecord: TypedContractMethod<
    [
      _ownerDid: string,
      _recordId: string,
      _producer: AddressLike,
      _signature: BytesLike,
      _resourceType: string,
      _consent: BigNumberish,
      _metadata: IDataRegistry.RecordMetadataStruct,
    ],
    [void],
    'nonpayable'
  >;

  removeProducerRecord: TypedContractMethod<[_producer: AddressLike], [void], 'nonpayable'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  shareData: TypedContractMethod<
    [recordId: string, consumerDid: string, ownerDid: string],
    [void],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  updateDidAuthAddress: TypedContractMethod<[_didAuthAddress: AddressLike], [void], 'nonpayable'>;

  updateProducerConsent: TypedContractMethod<
    [_producer: AddressLike, _status: BigNumberish],
    [void],
    'nonpayable'
  >;

  updateProducerRecord: TypedContractMethod<
    [
      _recordId: string,
      _producer: AddressLike,
      signature: BytesLike,
      resourceType: string,
      _status: BigNumberish,
      _consent: BigNumberish,
      _recordMetadata: IDataRegistry.RecordMetadataStruct,
      updaterDid: string,
    ],
    [void],
    'nonpayable'
  >;

  updateProducerRecordMetadata: TypedContractMethod<
    [_producer: AddressLike, _recordId: string, _metadata: IDataRegistry.RecordMetadataStruct],
    [void],
    'nonpayable'
  >;

  updateProducerRecordStatus: TypedContractMethod<
    [_producer: AddressLike, _status: BigNumberish],
    [void],
    'nonpayable'
  >;

  updateProviderMetadata: TypedContractMethod<
    [_metadata: IDataRegistry.MetadataStruct],
    [void],
    'nonpayable'
  >;

  updateProviderRecordSchema: TypedContractMethod<
    [_schemaRef: IDataRegistry.SchemaStruct],
    [void],
    'nonpayable'
  >;

  verifyData: TypedContractMethod<[recordId: string, verifierDid: string], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'changePauseState'
  ): TypedContractMethod<[_pause: boolean], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'changeTokenAddress'
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'didAuth'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getAddressFromDid'
  ): TypedContractMethod<[did: string], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getCompensationContractAddress'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getProducerConsent'
  ): TypedContractMethod<[_address: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getProducerDid'
  ): TypedContractMethod<[_producer: AddressLike], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getProducerRecord'
  ): TypedContractMethod<
    [_producer: AddressLike, _recordId: string],
    [IDataRegistry.HealthRecordStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getProducerRecordCount'
  ): TypedContractMethod<[_producer: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getProducerRecordInfo'
  ): TypedContractMethod<
    [_producer: AddressLike],
    [IDataRegistry.DataRecordCoreStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getProducerRecordStatus'
  ): TypedContractMethod<[_producer: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getProducerRecords'
  ): TypedContractMethod<
    [_producer: AddressLike],
    [[bigint, bigint, IDataRegistry.HealthRecordStructOutput[], string[], bigint]],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getProviderMetadata'
  ): TypedContractMethod<[], [IDataRegistry.MetadataStructOutput], 'view'>;
  getFunction(
    nameOrSignature: 'getRecordCid'
  ): TypedContractMethod<[recordId: string, requesterDid: string], [string], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'getRecordSchema'
  ): TypedContractMethod<[], [IDataRegistry.SchemaStructOutput], 'view'>;
  getFunction(nameOrSignature: 'getTotalRecordsCount'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'isConsumerAuthorized'
  ): TypedContractMethod<[recordId: string, consumerDid: string], [boolean], 'view'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'paused'): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'producerExists'
  ): TypedContractMethod<[_producer: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'registerProducerRecord'
  ): TypedContractMethod<
    [
      _ownerDid: string,
      _recordId: string,
      _producer: AddressLike,
      _signature: BytesLike,
      _resourceType: string,
      _consent: BigNumberish,
      _metadata: IDataRegistry.RecordMetadataStruct,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'removeProducerRecord'
  ): TypedContractMethod<[_producer: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'shareData'
  ): TypedContractMethod<
    [recordId: string, consumerDid: string, ownerDid: string],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateDidAuthAddress'
  ): TypedContractMethod<[_didAuthAddress: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateProducerConsent'
  ): TypedContractMethod<[_producer: AddressLike, _status: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateProducerRecord'
  ): TypedContractMethod<
    [
      _recordId: string,
      _producer: AddressLike,
      signature: BytesLike,
      resourceType: string,
      _status: BigNumberish,
      _consent: BigNumberish,
      _recordMetadata: IDataRegistry.RecordMetadataStruct,
      updaterDid: string,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'updateProducerRecordMetadata'
  ): TypedContractMethod<
    [_producer: AddressLike, _recordId: string, _metadata: IDataRegistry.RecordMetadataStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'updateProducerRecordStatus'
  ): TypedContractMethod<[_producer: AddressLike, _status: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateProviderMetadata'
  ): TypedContractMethod<[_metadata: IDataRegistry.MetadataStruct], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateProviderRecordSchema'
  ): TypedContractMethod<[_schemaRef: IDataRegistry.SchemaStruct], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'verifyData'
  ): TypedContractMethod<[recordId: string, verifierDid: string], [void], 'nonpayable'>;

  getEvent(
    key: 'AccessNotAllowed'
  ): TypedContractEvent<
    AccessNotAllowedEvent.InputTuple,
    AccessNotAllowedEvent.OutputTuple,
    AccessNotAllowedEvent.OutputObject
  >;
  getEvent(
    key: 'ConsumerAuthorized'
  ): TypedContractEvent<
    ConsumerAuthorizedEvent.InputTuple,
    ConsumerAuthorizedEvent.OutputTuple,
    ConsumerAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: 'ConsumerDeauthorized'
  ): TypedContractEvent<
    ConsumerDeauthorizedEvent.InputTuple,
    ConsumerDeauthorizedEvent.OutputTuple,
    ConsumerDeauthorizedEvent.OutputObject
  >;
  getEvent(
    key: 'DataDeactivated'
  ): TypedContractEvent<
    DataDeactivatedEvent.InputTuple,
    DataDeactivatedEvent.OutputTuple,
    DataDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: 'DataRegistered'
  ): TypedContractEvent<
    DataRegisteredEvent.InputTuple,
    DataRegisteredEvent.OutputTuple,
    DataRegisteredEvent.OutputObject
  >;
  getEvent(
    key: 'DataRemoved'
  ): TypedContractEvent<
    DataRemovedEvent.InputTuple,
    DataRemovedEvent.OutputTuple,
    DataRemovedEvent.OutputObject
  >;
  getEvent(
    key: 'DataShared'
  ): TypedContractEvent<
    DataSharedEvent.InputTuple,
    DataSharedEvent.OutputTuple,
    DataSharedEvent.OutputObject
  >;
  getEvent(
    key: 'DataUpdated'
  ): TypedContractEvent<
    DataUpdatedEvent.InputTuple,
    DataUpdatedEvent.OutputTuple,
    DataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'DataVerified'
  ): TypedContractEvent<
    DataVerifiedEvent.InputTuple,
    DataVerifiedEvent.OutputTuple,
    DataVerifiedEvent.OutputObject
  >;
  getEvent(
    key: 'MetadataUpdated'
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'PauseStateUpdated'
  ): TypedContractEvent<
    PauseStateUpdatedEvent.InputTuple,
    PauseStateUpdatedEvent.OutputTuple,
    PauseStateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Paused'
  ): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
  getEvent(
    key: 'ProducerConsentUpdated'
  ): TypedContractEvent<
    ProducerConsentUpdatedEvent.InputTuple,
    ProducerConsentUpdatedEvent.OutputTuple,
    ProducerConsentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'ProducerRecordRemoved'
  ): TypedContractEvent<
    ProducerRecordRemovedEvent.InputTuple,
    ProducerRecordRemovedEvent.OutputTuple,
    ProducerRecordRemovedEvent.OutputObject
  >;
  getEvent(
    key: 'ProducerRecordStatusUpdated'
  ): TypedContractEvent<
    ProducerRecordStatusUpdatedEvent.InputTuple,
    ProducerRecordStatusUpdatedEvent.OutputTuple,
    ProducerRecordStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'ProducerRecordUpdated'
  ): TypedContractEvent<
    ProducerRecordUpdatedEvent.InputTuple,
    ProducerRecordUpdatedEvent.OutputTuple,
    ProducerRecordUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'ProviderMetadataUpdated'
  ): TypedContractEvent<
    ProviderMetadataUpdatedEvent.InputTuple,
    ProviderMetadataUpdatedEvent.OutputTuple,
    ProviderMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'ProviderSchemaUpdated'
  ): TypedContractEvent<
    ProviderSchemaUpdatedEvent.InputTuple,
    ProviderSchemaUpdatedEvent.OutputTuple,
    ProviderSchemaUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'SharingNotAllowed'
  ): TypedContractEvent<
    SharingNotAllowedEvent.InputTuple,
    SharingNotAllowedEvent.OutputTuple,
    SharingNotAllowedEvent.OutputObject
  >;
  getEvent(
    key: 'TokenAddressUpdated'
  ): TypedContractEvent<
    TokenAddressUpdatedEvent.InputTuple,
    TokenAddressUpdatedEvent.OutputTuple,
    TokenAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'TokenUpdated'
  ): TypedContractEvent<
    TokenUpdatedEvent.InputTuple,
    TokenUpdatedEvent.OutputTuple,
    TokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Unpaused'
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    'AccessNotAllowed(string,string)': TypedContractEvent<
      AccessNotAllowedEvent.InputTuple,
      AccessNotAllowedEvent.OutputTuple,
      AccessNotAllowedEvent.OutputObject
    >;
    AccessNotAllowed: TypedContractEvent<
      AccessNotAllowedEvent.InputTuple,
      AccessNotAllowedEvent.OutputTuple,
      AccessNotAllowedEvent.OutputObject
    >;

    'ConsumerAuthorized(string,string,string)': TypedContractEvent<
      ConsumerAuthorizedEvent.InputTuple,
      ConsumerAuthorizedEvent.OutputTuple,
      ConsumerAuthorizedEvent.OutputObject
    >;
    ConsumerAuthorized: TypedContractEvent<
      ConsumerAuthorizedEvent.InputTuple,
      ConsumerAuthorizedEvent.OutputTuple,
      ConsumerAuthorizedEvent.OutputObject
    >;

    'ConsumerDeauthorized(string,string)': TypedContractEvent<
      ConsumerDeauthorizedEvent.InputTuple,
      ConsumerDeauthorizedEvent.OutputTuple,
      ConsumerDeauthorizedEvent.OutputObject
    >;
    ConsumerDeauthorized: TypedContractEvent<
      ConsumerDeauthorizedEvent.InputTuple,
      ConsumerDeauthorizedEvent.OutputTuple,
      ConsumerDeauthorizedEvent.OutputObject
    >;

    'DataDeactivated(string,uint256)': TypedContractEvent<
      DataDeactivatedEvent.InputTuple,
      DataDeactivatedEvent.OutputTuple,
      DataDeactivatedEvent.OutputObject
    >;
    DataDeactivated: TypedContractEvent<
      DataDeactivatedEvent.InputTuple,
      DataDeactivatedEvent.OutputTuple,
      DataDeactivatedEvent.OutputObject
    >;

    'DataRegistered(string,string,string,bytes32)': TypedContractEvent<
      DataRegisteredEvent.InputTuple,
      DataRegisteredEvent.OutputTuple,
      DataRegisteredEvent.OutputObject
    >;
    DataRegistered: TypedContractEvent<
      DataRegisteredEvent.InputTuple,
      DataRegisteredEvent.OutputTuple,
      DataRegisteredEvent.OutputObject
    >;

    'DataRemoved(address,string)': TypedContractEvent<
      DataRemovedEvent.InputTuple,
      DataRemovedEvent.OutputTuple,
      DataRemovedEvent.OutputObject
    >;
    DataRemoved: TypedContractEvent<
      DataRemovedEvent.InputTuple,
      DataRemovedEvent.OutputTuple,
      DataRemovedEvent.OutputObject
    >;

    'DataShared(address,address,string,string)': TypedContractEvent<
      DataSharedEvent.InputTuple,
      DataSharedEvent.OutputTuple,
      DataSharedEvent.OutputObject
    >;
    DataShared: TypedContractEvent<
      DataSharedEvent.InputTuple,
      DataSharedEvent.OutputTuple,
      DataSharedEvent.OutputObject
    >;

    'DataUpdated(address,string,string,bytes32)': TypedContractEvent<
      DataUpdatedEvent.InputTuple,
      DataUpdatedEvent.OutputTuple,
      DataUpdatedEvent.OutputObject
    >;
    DataUpdated: TypedContractEvent<
      DataUpdatedEvent.InputTuple,
      DataUpdatedEvent.OutputTuple,
      DataUpdatedEvent.OutputObject
    >;

    'DataVerified(string,string)': TypedContractEvent<
      DataVerifiedEvent.InputTuple,
      DataVerifiedEvent.OutputTuple,
      DataVerifiedEvent.OutputObject
    >;
    DataVerified: TypedContractEvent<
      DataVerifiedEvent.InputTuple,
      DataVerifiedEvent.OutputTuple,
      DataVerifiedEvent.OutputObject
    >;

    'MetadataUpdated(string,bytes32)': TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'PauseStateUpdated(address,address,bool)': TypedContractEvent<
      PauseStateUpdatedEvent.InputTuple,
      PauseStateUpdatedEvent.OutputTuple,
      PauseStateUpdatedEvent.OutputObject
    >;
    PauseStateUpdated: TypedContractEvent<
      PauseStateUpdatedEvent.InputTuple,
      PauseStateUpdatedEvent.OutputTuple,
      PauseStateUpdatedEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    'ProducerConsentUpdated(address,uint8)': TypedContractEvent<
      ProducerConsentUpdatedEvent.InputTuple,
      ProducerConsentUpdatedEvent.OutputTuple,
      ProducerConsentUpdatedEvent.OutputObject
    >;
    ProducerConsentUpdated: TypedContractEvent<
      ProducerConsentUpdatedEvent.InputTuple,
      ProducerConsentUpdatedEvent.OutputTuple,
      ProducerConsentUpdatedEvent.OutputObject
    >;

    'ProducerRecordRemoved(address)': TypedContractEvent<
      ProducerRecordRemovedEvent.InputTuple,
      ProducerRecordRemovedEvent.OutputTuple,
      ProducerRecordRemovedEvent.OutputObject
    >;
    ProducerRecordRemoved: TypedContractEvent<
      ProducerRecordRemovedEvent.InputTuple,
      ProducerRecordRemovedEvent.OutputTuple,
      ProducerRecordRemovedEvent.OutputObject
    >;

    'ProducerRecordStatusUpdated(address,uint8)': TypedContractEvent<
      ProducerRecordStatusUpdatedEvent.InputTuple,
      ProducerRecordStatusUpdatedEvent.OutputTuple,
      ProducerRecordStatusUpdatedEvent.OutputObject
    >;
    ProducerRecordStatusUpdated: TypedContractEvent<
      ProducerRecordStatusUpdatedEvent.InputTuple,
      ProducerRecordStatusUpdatedEvent.OutputTuple,
      ProducerRecordStatusUpdatedEvent.OutputObject
    >;

    'ProducerRecordUpdated(address,string,string,bytes32)': TypedContractEvent<
      ProducerRecordUpdatedEvent.InputTuple,
      ProducerRecordUpdatedEvent.OutputTuple,
      ProducerRecordUpdatedEvent.OutputObject
    >;
    ProducerRecordUpdated: TypedContractEvent<
      ProducerRecordUpdatedEvent.InputTuple,
      ProducerRecordUpdatedEvent.OutputTuple,
      ProducerRecordUpdatedEvent.OutputObject
    >;

    'ProviderMetadataUpdated(string,bytes32)': TypedContractEvent<
      ProviderMetadataUpdatedEvent.InputTuple,
      ProviderMetadataUpdatedEvent.OutputTuple,
      ProviderMetadataUpdatedEvent.OutputObject
    >;
    ProviderMetadataUpdated: TypedContractEvent<
      ProviderMetadataUpdatedEvent.InputTuple,
      ProviderMetadataUpdatedEvent.OutputTuple,
      ProviderMetadataUpdatedEvent.OutputObject
    >;

    'ProviderSchemaUpdated(string,bytes32)': TypedContractEvent<
      ProviderSchemaUpdatedEvent.InputTuple,
      ProviderSchemaUpdatedEvent.OutputTuple,
      ProviderSchemaUpdatedEvent.OutputObject
    >;
    ProviderSchemaUpdated: TypedContractEvent<
      ProviderSchemaUpdatedEvent.InputTuple,
      ProviderSchemaUpdatedEvent.OutputTuple,
      ProviderSchemaUpdatedEvent.OutputObject
    >;

    'SharingNotAllowed(string,string)': TypedContractEvent<
      SharingNotAllowedEvent.InputTuple,
      SharingNotAllowedEvent.OutputTuple,
      SharingNotAllowedEvent.OutputObject
    >;
    SharingNotAllowed: TypedContractEvent<
      SharingNotAllowedEvent.InputTuple,
      SharingNotAllowedEvent.OutputTuple,
      SharingNotAllowedEvent.OutputObject
    >;

    'TokenAddressUpdated(address)': TypedContractEvent<
      TokenAddressUpdatedEvent.InputTuple,
      TokenAddressUpdatedEvent.OutputTuple,
      TokenAddressUpdatedEvent.OutputObject
    >;
    TokenAddressUpdated: TypedContractEvent<
      TokenAddressUpdatedEvent.InputTuple,
      TokenAddressUpdatedEvent.OutputTuple,
      TokenAddressUpdatedEvent.OutputObject
    >;

    'TokenUpdated(address,address)': TypedContractEvent<
      TokenUpdatedEvent.InputTuple,
      TokenUpdatedEvent.OutputTuple,
      TokenUpdatedEvent.OutputObject
    >;
    TokenUpdated: TypedContractEvent<
      TokenUpdatedEvent.InputTuple,
      TokenUpdatedEvent.OutputTuple,
      TokenUpdatedEvent.OutputObject
    >;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
