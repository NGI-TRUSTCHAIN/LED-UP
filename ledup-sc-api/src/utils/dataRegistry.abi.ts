export const DataRegistryABI = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_metadata',
        type: 'tuple',
        internalType: 'struct DataTypes.Metadata',
        components: [
          { name: 'url', type: 'string', internalType: 'string' },
          { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
      {
        name: '_schema',
        type: 'tuple',
        internalType: 'struct DataTypes.Schema',
        components: [
          {
            name: 'schemaRef',
            type: 'tuple',
            internalType: 'struct DataTypes.Metadata',
            components: [
              { name: 'url', type: 'string', internalType: 'string' },
              { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
            ],
          },
        ],
      },
      { name: '_provider', type: 'address', internalType: 'address' },
      { name: '_tokenAddress', type: 'address', internalType: 'address' },
      { name: '_leveaWallet', type: 'address', internalType: 'address payable' },
      { name: '_serviceFeePercent', type: 'uint256', internalType: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'changePauseState',
    inputs: [{ name: '_pause', type: 'bool', internalType: 'bool' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'changeTokenAddress',
    inputs: [{ name: '_tokenAddress', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getCompensationContractAddress',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getProducerConsent',
    inputs: [{ name: '_address', type: 'address', internalType: 'address' }],
    outputs: [{ name: '', type: 'uint8', internalType: 'enum DataTypes.ConsentStatus' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getProducerRecord',
    inputs: [
      { name: '_producer', type: 'address', internalType: 'address' },
      { name: '_recordId', type: 'string', internalType: 'string' },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct DataTypes.Record',
        components: [
          { name: 'signature', type: 'bytes', internalType: 'bytes' },
          { name: 'resourceType', type: 'string', internalType: 'string' },
          {
            name: 'metadata',
            type: 'tuple',
            internalType: 'struct DataTypes.RecordMetadata',
            components: [
              { name: 'cid', type: 'string', internalType: 'string' },
              { name: 'url', type: 'string', internalType: 'string' },
              { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
            ],
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getProducerRecordCount',
    inputs: [{ name: '_producer', type: 'address', internalType: 'address' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getProducerRecordInfo',
    inputs: [{ name: '_address', type: 'address', internalType: 'address' }],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct DataTypes.RecordInfo',
        components: [
          { name: 'producer', type: 'address', internalType: 'address' },
          { name: 'status', type: 'uint8', internalType: 'enum DataTypes.RecordStatus' },
          { name: 'consent', type: 'uint8', internalType: 'enum DataTypes.ConsentStatus' },
          { name: 'nonce', type: 'uint256', internalType: 'uint256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getProducerRecordStatus',
    inputs: [{ name: '_producer', type: 'address', internalType: 'address' }],
    outputs: [{ name: '', type: 'uint8', internalType: 'enum DataTypes.RecordStatus' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getProducerRecords',
    inputs: [{ name: '_producer', type: 'address', internalType: 'address' }],
    outputs: [
      { name: '', type: 'uint8', internalType: 'enum DataTypes.RecordStatus' },
      { name: '', type: 'uint8', internalType: 'enum DataTypes.ConsentStatus' },
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct DataTypes.Record[]',
        components: [
          { name: 'signature', type: 'bytes', internalType: 'bytes' },
          { name: 'resourceType', type: 'string', internalType: 'string' },
          {
            name: 'metadata',
            type: 'tuple',
            internalType: 'struct DataTypes.RecordMetadata',
            components: [
              { name: 'cid', type: 'string', internalType: 'string' },
              { name: 'url', type: 'string', internalType: 'string' },
              { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
            ],
          },
        ],
      },
      { name: '', type: 'string[]', internalType: 'string[]' },
      { name: '', type: 'uint256', internalType: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getProviderMetadata',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct DataTypes.Metadata',
        components: [
          { name: 'url', type: 'string', internalType: 'string' },
          { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getRecordSchema',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct DataTypes.Schema',
        components: [
          {
            name: 'schemaRef',
            type: 'tuple',
            internalType: 'struct DataTypes.Metadata',
            components: [
              { name: 'url', type: 'string', internalType: 'string' },
              { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
            ],
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getTotalRecordsCount',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'paused',
    inputs: [],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'producerExists',
    inputs: [{ name: '_producer', type: 'address', internalType: 'address' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'registerProducerRecord',
    inputs: [
      { name: '_recordId', type: 'string', internalType: 'string' },
      { name: '_producer', type: 'address', internalType: 'address' },
      { name: '_signature', type: 'bytes', internalType: 'bytes' },
      { name: '_resourceType', type: 'string', internalType: 'string' },
      { name: '_consent', type: 'uint8', internalType: 'enum DataTypes.ConsentStatus' },
      {
        name: '_metadata',
        type: 'tuple',
        internalType: 'struct DataTypes.RecordMetadata',
        components: [
          { name: 'cid', type: 'string', internalType: 'string' },
          { name: 'url', type: 'string', internalType: 'string' },
          { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'removeProducerRecord',
    inputs: [{ name: '_producer', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  { type: 'function', name: 'renounceOwnership', inputs: [], outputs: [], stateMutability: 'nonpayable' },
  {
    type: 'function',
    name: 'shareData',
    inputs: [
      { name: '_producer', type: 'address', internalType: 'address' },
      { name: '_consumer', type: 'address', internalType: 'address' },
      { name: '_recordId', type: 'string', internalType: 'string' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'transferOwnership',
    inputs: [{ name: 'newOwner', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateProducerConsent',
    inputs: [
      { name: '_producer', type: 'address', internalType: 'address' },
      { name: '_status', type: 'uint8', internalType: 'enum DataTypes.ConsentStatus' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateProducerRecord',
    inputs: [
      { name: '_recordId', type: 'string', internalType: 'string' },
      { name: '_producer', type: 'address', internalType: 'address' },
      { name: '_signature', type: 'bytes', internalType: 'bytes' },
      { name: '_resourceType', type: 'string', internalType: 'string' },
      { name: '_status', type: 'uint8', internalType: 'enum DataTypes.RecordStatus' },
      { name: '_consent', type: 'uint8', internalType: 'enum DataTypes.ConsentStatus' },
      {
        name: '_recordMetadata',
        type: 'tuple',
        internalType: 'struct DataTypes.RecordMetadata',
        components: [
          { name: 'cid', type: 'string', internalType: 'string' },
          { name: 'url', type: 'string', internalType: 'string' },
          { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateProducerRecordMetadata',
    inputs: [
      { name: '_producer', type: 'address', internalType: 'address' },
      { name: '_recordId', type: 'string', internalType: 'string' },
      {
        name: '_metadata',
        type: 'tuple',
        internalType: 'struct DataTypes.RecordMetadata',
        components: [
          { name: 'cid', type: 'string', internalType: 'string' },
          { name: 'url', type: 'string', internalType: 'string' },
          { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateProducerRecordStatus',
    inputs: [
      { name: '_producer', type: 'address', internalType: 'address' },
      { name: '_status', type: 'uint8', internalType: 'enum DataTypes.RecordStatus' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateProviderMetadata',
    inputs: [
      {
        name: '_metadata',
        type: 'tuple',
        internalType: 'struct DataTypes.Metadata',
        components: [
          { name: 'url', type: 'string', internalType: 'string' },
          { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateProviderRecordSchema',
    inputs: [
      {
        name: '_schemaRef',
        type: 'tuple',
        internalType: 'struct DataTypes.Schema',
        components: [
          {
            name: 'schemaRef',
            type: 'tuple',
            internalType: 'struct DataTypes.Metadata',
            components: [
              { name: 'url', type: 'string', internalType: 'string' },
              { name: 'hash', type: 'bytes32', internalType: 'bytes32' },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'event',
    name: 'DataShared',
    inputs: [
      { name: 'producer', type: 'address', indexed: true, internalType: 'address' },
      { name: 'dataConsumer', type: 'address', indexed: true, internalType: 'address' },
      { name: 'recordId', type: 'string', indexed: false, internalType: 'string' },
      { name: 'url', type: 'string', indexed: false, internalType: 'string' },
      { name: 'cid', type: 'string', indexed: false, internalType: 'string' },
      { name: 'hash', type: 'bytes32', indexed: false, internalType: 'bytes32' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'NewProviderAddeed',
    inputs: [
      { name: 'newProvider', type: 'address', indexed: false, internalType: 'address' },
      { name: 'newProviderKey', type: 'bytes', indexed: false, internalType: 'bytes' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'OwnershipTransferred',
    inputs: [
      { name: 'previousOwner', type: 'address', indexed: true, internalType: 'address' },
      { name: 'newOwner', type: 'address', indexed: true, internalType: 'address' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'PauseStateUpdated',
    inputs: [
      { name: 'contractAddress', type: 'address', indexed: true, internalType: 'address' },
      { name: 'pausedBy', type: 'address', indexed: true, internalType: 'address' },
      { name: 'pause', type: 'bool', indexed: true, internalType: 'bool' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Paused',
    inputs: [{ name: 'account', type: 'address', indexed: false, internalType: 'address' }],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProducerConsentUpdated',
    inputs: [
      { name: 'producer', type: 'address', indexed: true, internalType: 'address' },
      { name: 'consent', type: 'uint8', indexed: true, internalType: 'enum DataTypes.ConsentStatus' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProducerRecordAdded',
    inputs: [
      { name: 'producer', type: 'address', indexed: true, internalType: 'address' },
      { name: 'recordId', type: 'string', indexed: true, internalType: 'string' },
      { name: 'cid', type: 'string', indexed: true, internalType: 'string' },
      { name: 'url', type: 'string', indexed: false, internalType: 'string' },
      { name: 'hash', type: 'bytes32', indexed: false, internalType: 'bytes32' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProducerRecordRemoved',
    inputs: [{ name: 'producer', type: 'address', indexed: true, internalType: 'address' }],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProducerRecordStatusUpdated',
    inputs: [
      { name: 'producer', type: 'address', indexed: true, internalType: 'address' },
      { name: 'status', type: 'uint8', indexed: true, internalType: 'enum DataTypes.RecordStatus' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProducerRecordUpdated',
    inputs: [
      { name: 'producer', type: 'address', indexed: true, internalType: 'address' },
      { name: 'recordId', type: 'string', indexed: true, internalType: 'string' },
      { name: 'url', type: 'string', indexed: false, internalType: 'string' },
      { name: 'cid', type: 'string', indexed: false, internalType: 'string' },
      { name: 'hash', type: 'bytes32', indexed: false, internalType: 'bytes32' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProviderInfoUpdated',
    inputs: [
      { name: 'provider', type: 'address', indexed: false, internalType: 'address' },
      { name: 'providerKey', type: 'bytes', indexed: false, internalType: 'bytes' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProviderMetadataUpdated',
    inputs: [
      { name: 'provider', type: 'address', indexed: true, internalType: 'address' },
      { name: 'url', type: 'string', indexed: false, internalType: 'string' },
      { name: 'hash', type: 'bytes32', indexed: false, internalType: 'bytes32' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProviderRemoved',
    inputs: [{ name: 'provider', type: 'address', indexed: false, internalType: 'address' }],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProviderSchemaUpdated',
    inputs: [
      { name: 'provider', type: 'address', indexed: true, internalType: 'address' },
      { name: 'url', type: 'string', indexed: false, internalType: 'string' },
      { name: 'hash', type: 'bytes32', indexed: false, internalType: 'bytes32' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'RecordAdded',
    inputs: [
      { name: 'recordId', type: 'string', indexed: false, internalType: 'string' },
      { name: 'producerKey', type: 'bytes', indexed: false, internalType: 'bytes' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'RecordPaused',
    inputs: [
      { name: 'pause', type: 'bool', indexed: false, internalType: 'bool' },
      { name: 'providerKey', type: 'bytes', indexed: false, internalType: 'bytes' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'RecordUpated',
    inputs: [
      { name: 'recordId', type: 'string', indexed: false, internalType: 'string' },
      { name: 'producerKey', type: 'bytes', indexed: false, internalType: 'bytes' },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'TokenAddressUpdated',
    inputs: [{ name: '_tokenAddress', type: 'address', indexed: true, internalType: 'address' }],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Unpaused',
    inputs: [{ name: 'account', type: 'address', indexed: false, internalType: 'address' }],
    anonymous: false,
  },
  { type: 'error', name: 'EnforcedPause', inputs: [] },
  { type: 'error', name: 'ExpectedPause', inputs: [] },
  {
    type: 'error',
    name: 'OwnableInvalidOwner',
    inputs: [{ name: 'owner', type: 'address', internalType: 'address' }],
  },
  {
    type: 'error',
    name: 'OwnableUnauthorizedAccount',
    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],
  },
  { type: 'error', name: 'Registry__ConsentAlreadyGranted', inputs: [] },
  { type: 'error', name: 'Registry__ConsentAlreadyRevoked', inputs: [] },
  {
    type: 'error',
    name: 'Registry__ConsentNotAllowed',
    inputs: [{ name: 'consent', type: 'uint8', internalType: 'enum DataTypes.ConsentStatus' }],
  },
  { type: 'error', name: 'Registry__InvalidInputParam', inputs: [] },
  { type: 'error', name: 'Registry__InvalidProvider', inputs: [] },
  { type: 'error', name: 'Registry__NotAuthorized', inputs: [] },
  {
    type: 'error',
    name: 'Registry__ParseParamsError',
    inputs: [{ name: 'message', type: 'string', internalType: 'string' }],
  },
  { type: 'error', name: 'Registry__PaymentNotVerified', inputs: [] },
  {
    type: 'error',
    name: 'Registry__ProducerNotFound',
    inputs: [{ name: 'producer', type: 'address', internalType: 'address' }],
  },
  {
    type: 'error',
    name: 'Registry__ProducerRecordAlreadyExists',
    inputs: [{ name: 'recordId', type: 'string', internalType: 'string' }],
  },
  {
    type: 'error',
    name: 'Registry__ProducerRecordNotFound',
    inputs: [{ name: 'recordId', type: 'string', internalType: 'string' }],
  },
  {
    type: 'error',
    name: 'Registry__RecordAlreadyExists',
    inputs: [{ name: 'recordId', type: 'string', internalType: 'string' }],
  },
  { type: 'error', name: 'Registry__ServicePaused', inputs: [] },
];
