# LED-UP Smart Contract API Development Guidelines

## Core Principles

- Use context logger from `@azure/functions` for consistent logging
- Prefer simplicity when implementing features - avoid over-engineering
- Follow strong typing with TypeScript and document with TypeDoc
- Implement Azure Functions best practices for smart contract interactions
- Follow Step by step approach when implementing features or fixing bugs
- For every feature whether new or modifying existing one, write detailed test cases and ensure all test cases pass before submitting the code for review
- Ensure writing a comprehensive documentation for all features implemented in `/openapi/docs` folder with new file name if the feature doesn't exist in the folder
- Don't take shortcut or do not compromize quality of code over your frustration
- When asked to test, make compressive test that will check every edge cases

## Project Structure

- **Types**: Import from `./src/types` and `./src/types/generated`
- **Contract ABIs**: Located in `src/constants`
- **Smart Contract References**: The API interacts with smart contracts in `../led-up-sc/`

## Smart Contract References

### Contracts

```bash
ls ../src/contracts
```

### Interfaces

```bash
ls ../src/interfaces
```

### Libraries

```bash
ls ../src/library
```

### Tests

```bash
ls ../test
```

### Scripts

```bash
ls ../scripts
```

## Development Guidelines

- Implement features completely before moving to the next task
- Use the current implementation as reference but adapt to new ABIs
- Follow Azure Functions patterns for blockchain interactions
- Ensure proper error handling and logging
- Write comprehensive tests for all functionality
- Document all functions and interfaces with TypeDoc

## Code Quality

- Maintain strong typing throughout the codebase
- Follow consistent naming conventions
- Write clean, maintainable code
- Include appropriate error handling
- Optimize for performance where necessary

## Deployment

- Ensure all environment variables are properly configured
- Test thoroughly before deployment
- Document deployment procedures

## Act as a Senior Developer

- Consider edge cases and security implications
- Review your own code before submitting
- Think about scalability and maintainability
