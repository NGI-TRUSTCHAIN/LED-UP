/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ZKPVerificationRegistry {
  export type VerificationResultStruct = {
    subject: AddressLike;
    verificationType: BytesLike;
    verificationId: BytesLike;
    timestamp: BigNumberish;
    expirationTime: BigNumberish;
    result: boolean;
    revoked: boolean;
    metadata: BytesLike;
  };

  export type VerificationResultStructOutput = [
    subject: string,
    verificationType: string,
    verificationId: string,
    timestamp: bigint,
    expirationTime: bigint,
    result: boolean,
    revoked: boolean,
    metadata: string
  ] & {
    subject: string;
    verificationType: string;
    verificationId: string;
    timestamp: bigint;
    expirationTime: bigint;
    result: boolean;
    revoked: boolean;
    metadata: string;
  };
}

export interface ZKPVerificationRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdministrator"
      | "authorizeVerifier"
      | "getSubjectVerifications"
      | "getVerification"
      | "isAdministrator"
      | "isVerificationValid"
      | "isVerifierAuthorized"
      | "registerVerification"
      | "removeAdministrator"
      | "revokeVerification"
      | "revokeVerifierAuthorization"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdministratorAdded"
      | "AdministratorRemoved"
      | "VerificationRegistered"
      | "VerificationRevoked"
      | "VerifierAuthorizationRevoked"
      | "VerifierAuthorized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdministrator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeVerifier",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubjectVerifications",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerification",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdministrator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerificationValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifierAuthorized",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVerification",
    values: [
      AddressLike,
      BytesLike,
      BytesLike,
      boolean,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdministrator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVerification",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVerifierAuthorization",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubjectVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerificationValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerifierAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdministrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVerifierAuthorization",
    data: BytesLike
  ): Result;
}

export namespace AdministratorAddedEvent {
  export type InputTuple = [admin: AddressLike, addedBy: AddressLike];
  export type OutputTuple = [admin: string, addedBy: string];
  export interface OutputObject {
    admin: string;
    addedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdministratorRemovedEvent {
  export type InputTuple = [admin: AddressLike, removedBy: AddressLike];
  export type OutputTuple = [admin: string, removedBy: string];
  export interface OutputObject {
    admin: string;
    removedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationRegisteredEvent {
  export type InputTuple = [
    verificationId: BytesLike,
    subject: AddressLike,
    verificationType: BytesLike,
    result: boolean,
    timestamp: BigNumberish,
    expirationTime: BigNumberish
  ];
  export type OutputTuple = [
    verificationId: string,
    subject: string,
    verificationType: string,
    result: boolean,
    timestamp: bigint,
    expirationTime: bigint
  ];
  export interface OutputObject {
    verificationId: string;
    subject: string;
    verificationType: string;
    result: boolean;
    timestamp: bigint;
    expirationTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationRevokedEvent {
  export type InputTuple = [
    verificationId: BytesLike,
    revokedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    verificationId: string,
    revokedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    verificationId: string;
    revokedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierAuthorizationRevokedEvent {
  export type InputTuple = [
    verifier: AddressLike,
    verificationType: BytesLike,
    revokedBy: AddressLike
  ];
  export type OutputTuple = [
    verifier: string,
    verificationType: string,
    revokedBy: string
  ];
  export interface OutputObject {
    verifier: string;
    verificationType: string;
    revokedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierAuthorizedEvent {
  export type InputTuple = [
    verifier: AddressLike,
    verificationType: BytesLike,
    authorizedBy: AddressLike
  ];
  export type OutputTuple = [
    verifier: string,
    verificationType: string,
    authorizedBy: string
  ];
  export interface OutputObject {
    verifier: string;
    verificationType: string;
    authorizedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZKPVerificationRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ZKPVerificationRegistry;
  waitForDeployment(): Promise<this>;

  interface: ZKPVerificationRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdministrator: TypedContractMethod<
    [admin: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizeVerifier: TypedContractMethod<
    [verifier: AddressLike, verificationType: BytesLike],
    [void],
    "nonpayable"
  >;

  getSubjectVerifications: TypedContractMethod<
    [subject: AddressLike],
    [string[]],
    "view"
  >;

  getVerification: TypedContractMethod<
    [verificationId: BytesLike],
    [ZKPVerificationRegistry.VerificationResultStructOutput],
    "view"
  >;

  isAdministrator: TypedContractMethod<[admin: AddressLike], [boolean], "view">;

  isVerificationValid: TypedContractMethod<
    [verificationId: BytesLike],
    [boolean],
    "view"
  >;

  isVerifierAuthorized: TypedContractMethod<
    [verifier: AddressLike, verificationType: BytesLike],
    [boolean],
    "view"
  >;

  registerVerification: TypedContractMethod<
    [
      subject: AddressLike,
      verificationType: BytesLike,
      verificationId: BytesLike,
      result: boolean,
      expirationTime: BigNumberish,
      metadata: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  removeAdministrator: TypedContractMethod<
    [admin: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeVerification: TypedContractMethod<
    [verificationId: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeVerifierAuthorization: TypedContractMethod<
    [verifier: AddressLike, verificationType: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdministrator"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizeVerifier"
  ): TypedContractMethod<
    [verifier: AddressLike, verificationType: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSubjectVerifications"
  ): TypedContractMethod<[subject: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVerification"
  ): TypedContractMethod<
    [verificationId: BytesLike],
    [ZKPVerificationRegistry.VerificationResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAdministrator"
  ): TypedContractMethod<[admin: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVerificationValid"
  ): TypedContractMethod<[verificationId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVerifierAuthorized"
  ): TypedContractMethod<
    [verifier: AddressLike, verificationType: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerVerification"
  ): TypedContractMethod<
    [
      subject: AddressLike,
      verificationType: BytesLike,
      verificationId: BytesLike,
      result: boolean,
      expirationTime: BigNumberish,
      metadata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAdministrator"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeVerification"
  ): TypedContractMethod<[verificationId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeVerifierAuthorization"
  ): TypedContractMethod<
    [verifier: AddressLike, verificationType: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdministratorAdded"
  ): TypedContractEvent<
    AdministratorAddedEvent.InputTuple,
    AdministratorAddedEvent.OutputTuple,
    AdministratorAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdministratorRemoved"
  ): TypedContractEvent<
    AdministratorRemovedEvent.InputTuple,
    AdministratorRemovedEvent.OutputTuple,
    AdministratorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationRegistered"
  ): TypedContractEvent<
    VerificationRegisteredEvent.InputTuple,
    VerificationRegisteredEvent.OutputTuple,
    VerificationRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VerificationRevoked"
  ): TypedContractEvent<
    VerificationRevokedEvent.InputTuple,
    VerificationRevokedEvent.OutputTuple,
    VerificationRevokedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierAuthorizationRevoked"
  ): TypedContractEvent<
    VerifierAuthorizationRevokedEvent.InputTuple,
    VerifierAuthorizationRevokedEvent.OutputTuple,
    VerifierAuthorizationRevokedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierAuthorized"
  ): TypedContractEvent<
    VerifierAuthorizedEvent.InputTuple,
    VerifierAuthorizedEvent.OutputTuple,
    VerifierAuthorizedEvent.OutputObject
  >;

  filters: {
    "AdministratorAdded(address,address)": TypedContractEvent<
      AdministratorAddedEvent.InputTuple,
      AdministratorAddedEvent.OutputTuple,
      AdministratorAddedEvent.OutputObject
    >;
    AdministratorAdded: TypedContractEvent<
      AdministratorAddedEvent.InputTuple,
      AdministratorAddedEvent.OutputTuple,
      AdministratorAddedEvent.OutputObject
    >;

    "AdministratorRemoved(address,address)": TypedContractEvent<
      AdministratorRemovedEvent.InputTuple,
      AdministratorRemovedEvent.OutputTuple,
      AdministratorRemovedEvent.OutputObject
    >;
    AdministratorRemoved: TypedContractEvent<
      AdministratorRemovedEvent.InputTuple,
      AdministratorRemovedEvent.OutputTuple,
      AdministratorRemovedEvent.OutputObject
    >;

    "VerificationRegistered(bytes32,address,bytes32,bool,uint256,uint256)": TypedContractEvent<
      VerificationRegisteredEvent.InputTuple,
      VerificationRegisteredEvent.OutputTuple,
      VerificationRegisteredEvent.OutputObject
    >;
    VerificationRegistered: TypedContractEvent<
      VerificationRegisteredEvent.InputTuple,
      VerificationRegisteredEvent.OutputTuple,
      VerificationRegisteredEvent.OutputObject
    >;

    "VerificationRevoked(bytes32,address,uint256)": TypedContractEvent<
      VerificationRevokedEvent.InputTuple,
      VerificationRevokedEvent.OutputTuple,
      VerificationRevokedEvent.OutputObject
    >;
    VerificationRevoked: TypedContractEvent<
      VerificationRevokedEvent.InputTuple,
      VerificationRevokedEvent.OutputTuple,
      VerificationRevokedEvent.OutputObject
    >;

    "VerifierAuthorizationRevoked(address,bytes32,address)": TypedContractEvent<
      VerifierAuthorizationRevokedEvent.InputTuple,
      VerifierAuthorizationRevokedEvent.OutputTuple,
      VerifierAuthorizationRevokedEvent.OutputObject
    >;
    VerifierAuthorizationRevoked: TypedContractEvent<
      VerifierAuthorizationRevokedEvent.InputTuple,
      VerifierAuthorizationRevokedEvent.OutputTuple,
      VerifierAuthorizationRevokedEvent.OutputObject
    >;

    "VerifierAuthorized(address,bytes32,address)": TypedContractEvent<
      VerifierAuthorizedEvent.InputTuple,
      VerifierAuthorizedEvent.OutputTuple,
      VerifierAuthorizedEvent.OutputObject
    >;
    VerifierAuthorized: TypedContractEvent<
      VerifierAuthorizedEvent.InputTuple,
      VerifierAuthorizedEvent.OutputTuple,
      VerifierAuthorizedEvent.OutputObject
    >;
  };
}
