/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ZKPVerifierFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AGE_VERIFIER_TYPE"
      | "ENHANCED_HASH_VERIFIER_TYPE"
      | "FHIR_VERIFIER_TYPE"
      | "HASH_VERIFIER_TYPE"
      | "deployAgeVerifier"
      | "deployFHIRVerifier"
      | "deployHashVerifier"
      | "getVerifier"
      | "registry"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "VerifierDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "AGE_VERIFIER_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENHANCED_HASH_VERIFIER_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FHIR_VERIFIER_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HASH_VERIFIER_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployAgeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployFHIRVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployHashVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AGE_VERIFIER_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENHANCED_HASH_VERIFIER_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FHIR_VERIFIER_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HASH_VERIFIER_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAgeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployFHIRVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployHashVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
}

export namespace VerifierDeployedEvent {
  export type InputTuple = [
    verifierType: BytesLike,
    verifierAddress: AddressLike
  ];
  export type OutputTuple = [verifierType: string, verifierAddress: string];
  export interface OutputObject {
    verifierType: string;
    verifierAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZKPVerifierFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ZKPVerifierFactory;
  waitForDeployment(): Promise<this>;

  interface: ZKPVerifierFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AGE_VERIFIER_TYPE: TypedContractMethod<[], [string], "view">;

  ENHANCED_HASH_VERIFIER_TYPE: TypedContractMethod<[], [string], "view">;

  FHIR_VERIFIER_TYPE: TypedContractMethod<[], [string], "view">;

  HASH_VERIFIER_TYPE: TypedContractMethod<[], [string], "view">;

  deployAgeVerifier: TypedContractMethod<
    [verifierAddress: AddressLike],
    [string],
    "nonpayable"
  >;

  deployFHIRVerifier: TypedContractMethod<
    [verifierAddress: AddressLike],
    [string],
    "nonpayable"
  >;

  deployHashVerifier: TypedContractMethod<
    [verifierAddress: AddressLike],
    [string],
    "nonpayable"
  >;

  getVerifier: TypedContractMethod<[verifierType: BytesLike], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AGE_VERIFIER_TYPE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ENHANCED_HASH_VERIFIER_TYPE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FHIR_VERIFIER_TYPE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "HASH_VERIFIER_TYPE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deployAgeVerifier"
  ): TypedContractMethod<
    [verifierAddress: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployFHIRVerifier"
  ): TypedContractMethod<
    [verifierAddress: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployHashVerifier"
  ): TypedContractMethod<
    [verifierAddress: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getVerifier"
  ): TypedContractMethod<[verifierType: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "VerifierDeployed"
  ): TypedContractEvent<
    VerifierDeployedEvent.InputTuple,
    VerifierDeployedEvent.OutputTuple,
    VerifierDeployedEvent.OutputObject
  >;

  filters: {
    "VerifierDeployed(bytes32,address)": TypedContractEvent<
      VerifierDeployedEvent.InputTuple,
      VerifierDeployedEvent.OutputTuple,
      VerifierDeployedEvent.OutputObject
    >;
    VerifierDeployed: TypedContractEvent<
      VerifierDeployedEvent.InputTuple,
      VerifierDeployedEvent.OutputTuple,
      VerifierDeployedEvent.OutputObject
    >;
  };
}
