/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  FHIRVerifier,
  FHIRVerifierInterface,
} from "../../../contracts/zkp/FHIRVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifierAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FHIRVerifier__InvalidInputLength",
    type: "error",
  },
  {
    inputs: [],
    name: "FHIRVerifier__InvalidResourceType",
    type: "error",
  },
  {
    inputs: [],
    name: "FHIRVerifier__InvalidVerificationMode",
    type: "error",
  },
  {
    inputs: [],
    name: "FHIRVerifier__InvalidVerifierAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "FHIRVerifier__VerificationCallFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "verifier",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum FHIRVerifier.ResourceType",
        name: "resourceType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256[2]",
        name: "expectedHash",
        type: "uint256[2]",
      },
      {
        indexed: false,
        internalType: "enum FHIRVerifier.VerificationMode",
        name: "verificationMode",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    name: "FHIRResourceVerified",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum FHIRVerifier.ResourceType",
        name: "resourceType",
        type: "uint8",
      },
    ],
    name: "getResourceTypeString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum FHIRVerifier.VerificationMode",
        name: "mode",
        type: "uint8",
      },
    ],
    name: "getVerificationModeString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[]",
        name: "input",
        type: "uint256[]",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "enum FHIRVerifier.ResourceType",
        name: "resourceType",
        type: "uint8",
      },
      {
        internalType: "uint256[2]",
        name: "expectedHash",
        type: "uint256[2]",
      },
    ],
    name: "verifyFHIRResource",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "enum FHIRVerifier.ResourceType",
        name: "resourceType",
        type: "uint8",
      },
      {
        internalType: "uint256[2]",
        name: "expectedHash",
        type: "uint256[2]",
      },
      {
        internalType: "enum FHIRVerifier.ResourceType",
        name: "referencedResourceType",
        type: "uint8",
      },
    ],
    name: "verifyFHIRResourceWithReference",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "enum FHIRVerifier.ResourceType",
        name: "resourceType",
        type: "uint8",
      },
      {
        internalType: "uint256[2]",
        name: "expectedHash",
        type: "uint256[2]",
      },
    ],
    name: "verifyFHIRResourceWithSelectiveDisclosure",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461008257601f610e4238819003918201601f19168301916001600160401b038311848410176100875780849260209460405283398101031261008257516001600160a01b038116808203610082571561007057608052604051610da4908161009e8239608051816106aa0152f35b60405163247ae10560e21b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c8063160354ae146107765780632612907c146105bb5780637a59c8f31461034b578063e08d406a14610204578063f3a7f4e4146100a25763fb16431c1461006357600080fd5b3461009e57602036600319011261009e573591601083101561009b575061008c61009792610996565b9051918291826107a0565b0390f35b80fd5b8280fd5b50903461009e576100b2366107e9565b91969293909560108710156101f157600f87116101e35785516100d481610838565b8181526020986080368b84013760018901808a116101d0579161013d918b9594936100fe836108c0565b52863561010a836108e3565b5285870135610118836108f3565b52600161012483610903565b528951630984a41f60e21b815298899586958601610913565b0381305afa9283156101c6579084918394610197575b5081519586528686013760608401521515918260808201527f3d2d8102091d8cb631a6492fc9835c298fea9ab95102dc5c0fe78845979a362360a03392a251908152f35b6101b8919450873d89116101bf575b6101b08183610886565b8101906108a8565b9238610153565b503d6101a6565b84513d84823e3d90fd5b634e487b7160e01b875260118452602487fd5b855163028cfb5160e61b8152fd5b634e487b7160e01b845260219052602483fd5b50903461009e57610214366107e9565b929196939095601087101561033857600f87116101e357855161023681610838565b8181526020986080368b84013760018901808a11610325579161029f918b959493610260836108c0565b52873561026c836108e3565b528588013561027a836108f3565b52600261028683610903565b528951630984a41f60e21b815296879586958601610913565b0381305afa92831561031a5790849291936102fb575b50815194855285850137600160608401521515918260808201527f3d2d8102091d8cb631a6492fc9835c298fea9ab95102dc5c0fe78845979a362360a03392a251908152f35b610313919350863d88116101bf576101b08183610886565b91386102b5565b8451903d90823e3d90fd5b634e487b7160e01b885260118452602488fd5b634e487b7160e01b855260219052602484fd5b509190346105b7576101803660031901126105b757366044116105b7573660c4116105b7576101049136831161009b5782359260108410156105b75761016436811161009e5735906010821015806105b357600f861180156105a7575b61059757845160c0810181811067ffffffffffffffff821117610584578652600581526020978882019260a0368537600192838a01808b1161055e576103ed826108c0565b526101249687356103fd836108e3565b5261014492833561040d846108f3565b52600361041984610903565b526105715784810180911161055e57815184101561054b57918b95939260a08398969301528951968795630984a41f60e21b87528b8a8801958089013760448b8d8983015b600283106105225750905061012092915060c4808a01378701525180935284019291885b81811061050a575050505081900381305afa92831561031a5790849291936104eb575b50815194855285850137600260608401521515918260808201527f3d2d8102091d8cb631a6492fc9835c298fea9ab95102dc5c0fe78845979a362360a03392a251908152f35b610503919350863d88116101bf576101b08183610886565b91386104a5565b835185528c9688965094850194909301928201610482565b8180939597999a9c50889b50848299959799370193019101908e98969593918d8b99969461045e565b634e487b7160e01b895260328452602489fd5b634e487b7160e01b895260118452602489fd5b634e487b7160e01b895260218452602489fd5b634e487b7160e01b865260418952602486fd5b845163028cfb5160e61b81528790fd5b505082600f83116103a8565b8380fd5b5080fd5b50913461009b5761012092836003193601126105b757366044116105b7573660c4116105b75761010436811161009e57359367ffffffffffffffff908186116105b357366023870112156105b35785830135828111610772578060051b96366024898301011161076e5784821061075e57865191602098898401946361971b8760e11b865289886024870137604489606487015b8c6002831061074a579250505060c460e4870137610124850152610144808501839052916001600160fb1b03106107465787949284928695836106a694602461016495018584013781010390810184520182610886565b51907f00000000000000000000000000000000000000000000000000000000000000005afa903d1561073c573d908111610729578451906106f0601f8201601f1916880183610886565b81528093863d92013e5b1561071b5750808380610712935183010191016108a8565b90519015158152f35b825163685cbdc560e11b8152fd5b634e487b7160e01b845260418352602484fd5b50606092506106fa565b8780fd5b80828186600195370193019101909161064f565b86516366017c4d60e11b81528590fd5b8580fd5b8480fd5b503461009e57602036600319011261009e573591600383101561009b575061008c61009792610cbe565b6020808252825181830181905290939260005b8281106107d557505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016107b3565b6101606003198201126108335780604411610833576004918160c41161083357604491610104918183116108335760c4923560108110156108335791610164116108335761012490565b600080fd5b60a0810190811067ffffffffffffffff82111761085457604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761085457604052565b90601f8019910116810190811067ffffffffffffffff82111761085457604052565b90816020910312610833575180151581036108335790565b8051156108cd5760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156108cd5760400190565b8051600210156108cd5760600190565b8051600310156108cd5760800190565b9094939194610120908183019460408092853760008483015b6002821061097b575050610140949596975060c08401376101008201528251809452019160208092019160005b828110610967575050505090565b835185529381019392810192600101610959565b838082818d6001959c9b9c37019a019101909896959661092c565b6010811015610ca857806109c857506040516109b18161086a565b600781526614185d1a595b9d60ca1b602082015290565b600181036109f857506040516109dd8161086a565b600b81526a27b139b2b93b30ba34b7b760a91b602082015290565b60028103610a2e5750604051610a0d8161086a565b60118152701359591a58d85d1a5bdb94995c5d595cdd607a1b602082015290565b60038103610a5c5750604051610a438161086a565b600981526821b7b73234ba34b7b760b91b602082015290565b60048103610a8a5750604051610a718161086a565b600981526850726f63656475726560b81b602082015290565b60058103610ab85750604051610a9f8161086a565b600981526822b731b7bab73a32b960b91b602082015290565b60068103610aed5750604051610acd8161086a565b601081526f111a5859db9bdcdd1a58d4995c1bdc9d60821b602082015290565b60078103610b1a5750604051610b028161086a565b600881526721b0b932a83630b760c11b602082015290565b60088103610b4b5750604051610b2f8161086a565b600c81526b24b6b6bab734bd30ba34b7b760a11b602082015290565b60098103610b825750604051610b608161086a565b6012815271416c6c65726779496e746f6c6572616e636560701b602082015290565b600a8103610bad5750604051610b978161086a565b600681526544657669636560d01b602082015290565b600b8103610bde5750604051610bc28161086a565b600c81526b27b933b0b734bd30ba34b7b760a11b602082015290565b600c8103610c0f5750604051610bf38161086a565b600c81526b283930b1ba34ba34b7b732b960a11b602082015290565b600d8103610c3c5750604051610c248161086a565b60088152672637b1b0ba34b7b760c11b602082015290565b600e8103610c6b5750604051610c518161086a565b600a81526926b2b234b1b0ba34b7b760b11b602082015290565b600f03610c9657604051610c7e8161086a565b6008815267436f76657261676560c01b602082015290565b60405163028cfb5160e61b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b6003811015610ca85780610cee5750604051610cd98161086a565b6005815264426173696360d81b602082015290565b60018103610d265750604051610d038161086a565b601381527253656c656374697665446973636c6f7375726560681b602082015290565b600203610d5c57604051610d398161086a565b60138152722932b332b932b731b2ab30b634b230ba34b7b760691b602082015290565b604051630558c3bd60e01b8152600490fdfea26469706673582212207dd0015060c942aa2c3bb7c49bedff46da8e322281fde523280e5032a827fa3b64736f6c63430008140033";

type FHIRVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FHIRVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FHIRVerifier__factory extends ContractFactory {
  constructor(...args: FHIRVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verifierAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_verifierAddress, overrides || {});
  }
  override deploy(
    _verifierAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_verifierAddress, overrides || {}) as Promise<
      FHIRVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FHIRVerifier__factory {
    return super.connect(runner) as FHIRVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FHIRVerifierInterface {
    return new Interface(_abi) as FHIRVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FHIRVerifier {
    return new Contract(address, _abi, runner) as unknown as FHIRVerifier;
  }
}
