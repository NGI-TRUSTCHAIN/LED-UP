/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  HashVerifier,
  HashVerifierInterface,
} from "../../../contracts/zkp/HashVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifierAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "HashVerifier__InvalidInputLength",
    type: "error",
  },
  {
    inputs: [],
    name: "HashVerifier__InvalidVerifierAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "HashVerifier__VerificationCallFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "verifier",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[2]",
        name: "expectedHash",
        type: "uint256[2]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    name: "HashVerified",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[]",
        name: "input",
        type: "uint256[]",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2]",
        name: "expectedHash",
        type: "uint256[2]",
      },
    ],
    name: "verifyHash",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461008257601f61054838819003918201601f19168301916001600160401b038311848410176100875780849260209460405283398101031261008257516001600160a01b0381168082036100825715610070576080526040516104aa908161009e8239608051816102f20152f35b604051631926417360e21b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c9081632612907c146101eb57506372bf59831461003b57600080fd5b346101e4576101403660031901126101e457366044116101e4573660c4116101e457610104913683116101e857610144933685116101e4578251906060820182811067ffffffffffffffff8211176101d15784526002825260209586830191853684378351156101be57863583528351916001928310156101ab5790869492899492610124948535888201528751978896630984a41f60e21b8852870194808801376100e96044870161042d565b8960c4808801376101208b8701525180935284019291875b818110610193575050505081900381305afa918215610188579161015b575b5081805193843715159182828201527fca7508e7ba08ed83de0c61b43711a03a45c776182c7e4bed68fe854f4652899560603392a251908152f35b61017b9150843d8611610181575b61017381836103f5565b810190610457565b38610120565b503d610169565b8351903d90823e3d90fd5b835185528b9688965094850194909301928201610101565b634e487b7160e01b865260328252602486fd5b634e487b7160e01b855260329052602484fd5b634e487b7160e01b845260418252602484fd5b5080fd5b80fd5b828486346101e4576101203660031901126101e457366044116101e4573660c4116101e4576101043681116103f157359367ffffffffffffffff8086116103ed57366023870112156103ed57858301358181116103e95760249236848360051b8a0101116103e5576002908183036103d75750865191878301838110858211176103c557885280156103b3578489013583526001908110156103b357604460209901358984015287519189830193637ae4eb4f60e11b85528988888601376102b56064850161042d565b8960c460e4860137889061012485015b8c8484106103a157505050505050610144815261018081018181108482111761038f5787525185918291907f00000000000000000000000000000000000000000000000000000000000000005afa913d15610383573d9182116103725750845190610339601f8201601f19168801836103f5565b81528093863d92013e5b15610364575080838061035b93518301019101610457565b90519015158152f35b8251639f14725b60e01b8152fd5b634e487b7160e01b85526041845284fd5b50509150606091610343565b634e487b7160e01b8752604186528487fd5b825182529285019291820191016102c5565b634e487b7160e01b8752603286528487fd5b634e487b7160e01b8852604187528588fd5b632c66ebbb60e11b81528590fd5b8580fd5b8480fd5b8380fd5b8280fd5b90601f8019910116810190811067ffffffffffffffff82111761041757604052565b634e487b7160e01b600052604160045260246000fd5b60446000915b6002831061044057505050565b600190604081818581943701920192019190610433565b9081602091031261046f5751801515810361046f5790565b600080fdfea264697066735822122020a7403c0eb43a30f3f081c522c1359546d1b5cac5adb805b8b8e778a9bdbcf564736f6c63430008140033";

type HashVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HashVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HashVerifier__factory extends ContractFactory {
  constructor(...args: HashVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verifierAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_verifierAddress, overrides || {});
  }
  override deploy(
    _verifierAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_verifierAddress, overrides || {}) as Promise<
      HashVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): HashVerifier__factory {
    return super.connect(runner) as HashVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HashVerifierInterface {
    return new Interface(_abi) as HashVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): HashVerifier {
    return new Contract(address, _abi, runner) as unknown as HashVerifier;
  }
}
