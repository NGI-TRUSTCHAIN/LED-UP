export const DataRegistryABI = [
  {
    inputs: [
      {
        components: [
          { internalType: 'string', name: 'url', type: 'string' },
          { internalType: 'bytes32', name: 'hash', type: 'bytes32' },
        ],
        internalType: 'struct DataTypes.Metadata',
        name: '_metadata',
        type: 'tuple',
      },
      {
        components: [
          {
            components: [
              { internalType: 'string', name: 'url', type: 'string' },
              { internalType: 'bytes32', name: 'hash', type: 'bytes32' },
            ],
            internalType: 'struct DataTypes.Metadata',
            name: 'schemaRef',
            type: 'tuple',
          },
        ],
        internalType: 'struct DataTypes.Schema',
        name: '_schema',
        type: 'tuple',
      },
      { internalType: 'address', name: '_provider', type: 'address' },
      { internalType: 'address', name: '_tokenAddress', type: 'address' },
      { internalType: 'address payable', name: '_leveaWallet', type: 'address' },
      { internalType: 'uint256', name: '_serviceFeePercent', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  { inputs: [], name: 'EnforcedPause', type: 'error' },
  { inputs: [], name: 'ExpectedPause', type: 'error' },
  { inputs: [{ internalType: 'address', name: 'owner', type: 'address' }], name: 'OwnableInvalidOwner', type: 'error' },
  {
    inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
    name: 'OwnableUnauthorizedAccount',
    type: 'error',
  },
  { inputs: [], name: 'Registry__ConsentAlreadyGranted', type: 'error' },
  { inputs: [], name: 'Registry__ConsentAlreadyRevoked', type: 'error' },
  {
    inputs: [{ internalType: 'enum DataTypes.ConsentStatus', name: 'consent', type: 'uint8' }],
    name: 'Registry__ConsentNotAllowed',
    type: 'error',
  },
  { inputs: [], name: 'Registry__InvalidInputParam', type: 'error' },
  { inputs: [], name: 'Registry__InvalidProvider', type: 'error' },
  { inputs: [], name: 'Registry__NotAuthorized', type: 'error' },
  {
    inputs: [{ internalType: 'string', name: 'message', type: 'string' }],
    name: 'Registry__ParseParamsError',
    type: 'error',
  },
  { inputs: [], name: 'Registry__PaymentNotVerified', type: 'error' },
  {
    inputs: [{ internalType: 'address', name: 'producer', type: 'address' }],
    name: 'Registry__ProducerNotFound',
    type: 'error',
  },
  {
    inputs: [{ internalType: 'string', name: 'recordId', type: 'string' }],
    name: 'Registry__ProducerRecordAlreadyExists',
    type: 'error',
  },
  {
    inputs: [{ internalType: 'string', name: 'recordId', type: 'string' }],
    name: 'Registry__ProducerRecordNotFound',
    type: 'error',
  },
  {
    inputs: [{ internalType: 'string', name: 'recordId', type: 'string' }],
    name: 'Registry__RecordAlreadyExists',
    type: 'error',
  },
  { inputs: [], name: 'Registry__ServicePaused', type: 'error' },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'producer', type: 'address' },
      { indexed: true, internalType: 'address', name: 'dataConsumer', type: 'address' },
      { indexed: false, internalType: 'string', name: 'recordId', type: 'string' },
      { indexed: false, internalType: 'string', name: 'url', type: 'string' },
      { indexed: false, internalType: 'string', name: 'cid', type: 'string' },
      { indexed: false, internalType: 'bytes32', name: 'hash', type: 'bytes32' },
    ],
    name: 'DataShared',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'address', name: 'newProvider', type: 'address' },
      { indexed: false, internalType: 'bytes', name: 'newProviderKey', type: 'bytes' },
    ],
    name: 'NewProviderAddeed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'previousOwner', type: 'address' },
      { indexed: true, internalType: 'address', name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: 'bool', name: 'pause', type: 'bool' }],
    name: 'PauseStateUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'address', name: 'account', type: 'address' }],
    name: 'Paused',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'producer', type: 'address' },
      { indexed: true, internalType: 'enum DataTypes.ConsentStatus', name: 'consent', type: 'uint8' },
    ],
    name: 'ProducerConsentUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'producer', type: 'address' },
      { indexed: true, internalType: 'string', name: 'recordId', type: 'string' },
      { indexed: true, internalType: 'string', name: 'cid', type: 'string' },
      { indexed: false, internalType: 'string', name: 'url', type: 'string' },
      { indexed: false, internalType: 'bytes32', name: 'hash', type: 'bytes32' },
    ],
    name: 'ProducerRecordAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: 'address', name: 'producer', type: 'address' }],
    name: 'ProducerRecordRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'producer', type: 'address' },
      { indexed: true, internalType: 'enum DataTypes.RecordStatus', name: 'status', type: 'uint8' },
    ],
    name: 'ProducerRecordStatusUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'producer', type: 'address' },
      { indexed: true, internalType: 'string', name: 'recordId', type: 'string' },
      { indexed: false, internalType: 'string', name: 'url', type: 'string' },
      { indexed: false, internalType: 'string', name: 'cid', type: 'string' },
      { indexed: false, internalType: 'bytes32', name: 'hash', type: 'bytes32' },
    ],
    name: 'ProducerRecordUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'address', name: 'provider', type: 'address' },
      { indexed: false, internalType: 'bytes', name: 'providerKey', type: 'bytes' },
    ],
    name: 'ProviderInfoUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'provider', type: 'address' },
      { indexed: false, internalType: 'string', name: 'url', type: 'string' },
      { indexed: false, internalType: 'bytes32', name: 'hash', type: 'bytes32' },
    ],
    name: 'ProviderMetadataUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'address', name: 'provider', type: 'address' }],
    name: 'ProviderRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: 'address', name: 'provider', type: 'address' },
      { indexed: false, internalType: 'string', name: 'url', type: 'string' },
      { indexed: false, internalType: 'bytes32', name: 'hash', type: 'bytes32' },
    ],
    name: 'ProviderSchemaUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'string', name: 'recordId', type: 'string' },
      { indexed: false, internalType: 'bytes', name: 'producerKey', type: 'bytes' },
    ],
    name: 'RecordAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'bool', name: 'pause', type: 'bool' },
      { indexed: false, internalType: 'bytes', name: 'providerKey', type: 'bytes' },
    ],
    name: 'RecordPaused',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: 'string', name: 'recordId', type: 'string' },
      { indexed: false, internalType: 'bytes', name: 'producerKey', type: 'bytes' },
    ],
    name: 'RecordUpated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: 'address', name: '_tokenAddress', type: 'address' }],
    name: 'TokenAddressUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: 'address', name: 'account', type: 'address' }],
    name: 'Unpaused',
    type: 'event',
  },
  {
    inputs: [{ internalType: 'bool', name: '_pause', type: 'bool' }],
    name: 'changePauseState',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '_tokenAddress', type: 'address' }],
    name: 'changeTokenAddress',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCompensationContractAddress',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '_address', type: 'address' }],
    name: 'getProducerConsent',
    outputs: [{ internalType: 'enum DataTypes.ConsentStatus', name: '', type: 'uint8' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: '_producer', type: 'address' },
      { internalType: 'string', name: '_recordId', type: 'string' },
    ],
    name: 'getProducerRecord',
    outputs: [
      {
        components: [
          { internalType: 'bytes', name: 'signature', type: 'bytes' },
          { internalType: 'string', name: 'resourceType', type: 'string' },
          {
            components: [
              { internalType: 'string', name: 'cid', type: 'string' },
              { internalType: 'string', name: 'url', type: 'string' },
              { internalType: 'bytes32', name: 'hash', type: 'bytes32' },
            ],
            internalType: 'struct DataTypes.RecordMetadata',
            name: 'metadata',
            type: 'tuple',
          },
        ],
        internalType: 'struct DataTypes.Record',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '_producer', type: 'address' }],
    name: 'getProducerRecordCount',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '_address', type: 'address' }],
    name: 'getProducerRecordInfo',
    outputs: [
      {
        components: [
          { internalType: 'address', name: 'producer', type: 'address' },
          { internalType: 'enum DataTypes.RecordStatus', name: 'status', type: 'uint8' },
          { internalType: 'enum DataTypes.ConsentStatus', name: 'consent', type: 'uint8' },
          { internalType: 'uint256', name: 'nonce', type: 'uint256' },
        ],
        internalType: 'struct DataTypes.RecordInfo',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '_producer', type: 'address' }],
    name: 'getProducerRecordStatus',
    outputs: [{ internalType: 'enum DataTypes.RecordStatus', name: '', type: 'uint8' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getProviderMetadata',
    outputs: [
      {
        components: [
          { internalType: 'string', name: 'url', type: 'string' },
          { internalType: 'bytes32', name: 'hash', type: 'bytes32' },
        ],
        internalType: 'struct DataTypes.Metadata',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getRecordSchema',
    outputs: [
      {
        components: [
          {
            components: [
              { internalType: 'string', name: 'url', type: 'string' },
              { internalType: 'bytes32', name: 'hash', type: 'bytes32' },
            ],
            internalType: 'struct DataTypes.Metadata',
            name: 'schemaRef',
            type: 'tuple',
          },
        ],
        internalType: 'struct DataTypes.Schema',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTotalRecordsCount',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'paused',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '_producer', type: 'address' }],
    name: 'producerExists',
    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'string', name: '_recordId', type: 'string' },
      { internalType: 'address', name: '_producer', type: 'address' },
      { internalType: 'bytes', name: '_signature', type: 'bytes' },
      { internalType: 'string', name: '_resourceType', type: 'string' },
      { internalType: 'enum DataTypes.ConsentStatus', name: '_consent', type: 'uint8' },
      {
        components: [
          { internalType: 'string', name: 'cid', type: 'string' },
          { internalType: 'string', name: 'url', type: 'string' },
          { internalType: 'bytes32', name: 'hash', type: 'bytes32' },
        ],
        internalType: 'struct DataTypes.RecordMetadata',
        name: '_metadata',
        type: 'tuple',
      },
    ],
    name: 'registerProducerRecord',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '_producer', type: 'address' }],
    name: 'removeProducerRecord',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  { inputs: [], name: 'renounceOwnership', outputs: [], stateMutability: 'nonpayable', type: 'function' },
  {
    inputs: [
      { internalType: 'address', name: '_producer', type: 'address' },
      { internalType: 'address', name: '_consumer', type: 'address' },
      { internalType: 'string', name: '_recordId', type: 'string' },
    ],
    name: 'shareData',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: '_producer', type: 'address' },
      { internalType: 'enum DataTypes.ConsentStatus', name: '_status', type: 'uint8' },
    ],
    name: 'updateProducerConsent',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'string', name: '_recordId', type: 'string' },
      { internalType: 'address', name: '_producer', type: 'address' },
      { internalType: 'bytes', name: '_signature', type: 'bytes' },
      { internalType: 'string', name: '_resourceType', type: 'string' },
      { internalType: 'enum DataTypes.RecordStatus', name: '_status', type: 'uint8' },
      { internalType: 'enum DataTypes.ConsentStatus', name: '_consent', type: 'uint8' },
      {
        components: [
          { internalType: 'string', name: 'cid', type: 'string' },
          { internalType: 'string', name: 'url', type: 'string' },
          { internalType: 'bytes32', name: 'hash', type: 'bytes32' },
        ],
        internalType: 'struct DataTypes.RecordMetadata',
        name: '_recordMetadata',
        type: 'tuple',
      },
    ],
    name: 'updateProducerRecord',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: '_producer', type: 'address' },
      { internalType: 'string', name: '_recordId', type: 'string' },
      {
        components: [
          { internalType: 'string', name: 'cid', type: 'string' },
          { internalType: 'string', name: 'url', type: 'string' },
          { internalType: 'bytes32', name: 'hash', type: 'bytes32' },
        ],
        internalType: 'struct DataTypes.RecordMetadata',
        name: '_metadata',
        type: 'tuple',
      },
    ],
    name: 'updateProducerRecordMetadata',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      { internalType: 'address', name: '_producer', type: 'address' },
      { internalType: 'enum DataTypes.RecordStatus', name: '_status', type: 'uint8' },
    ],
    name: 'updateProducerRecordStatus',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          { internalType: 'string', name: 'url', type: 'string' },
          { internalType: 'bytes32', name: 'hash', type: 'bytes32' },
        ],
        internalType: 'struct DataTypes.Metadata',
        name: '_metadata',
        type: 'tuple',
      },
    ],
    name: 'updateProviderMetadata',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              { internalType: 'string', name: 'url', type: 'string' },
              { internalType: 'bytes32', name: 'hash', type: 'bytes32' },
            ],
            internalType: 'struct DataTypes.Metadata',
            name: 'schemaRef',
            type: 'tuple',
          },
        ],
        internalType: 'struct DataTypes.Schema',
        name: '_schemaRef',
        type: 'tuple',
      },
    ],
    name: 'updateProviderRecordSchema',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];
