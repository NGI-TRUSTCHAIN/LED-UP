/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DidAuth1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "CONSUMER_CREDENTIAL"
      | "CONSUMER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "ISSUER_ROLE"
      | "OPERATOR_ROLE"
      | "PRODUCER_CREDENTIAL"
      | "PRODUCER_ROLE"
      | "PROVIDER_CREDENTIAL"
      | "PROVIDER_ROLE"
      | "VERIFIER_ROLE"
      | "authenticate"
      | "didIssuer"
      | "didRegistry"
      | "didVerifier"
      | "getCallerDid"
      | "getDidFromAddress"
      | "getRequiredCredentialForRole"
      | "getRoleRequirement"
      | "grantDidRole"
      | "hasDidRole"
      | "hasRequiredRolesAndCredentials"
      | "hasRole"
      | "isTrustedIssuer"
      | "issueCredential"
      | "owner"
      | "resolveDid"
      | "revokeDidRole"
      | "setRoleRequirement"
      | "setTrustedIssuer"
      | "verifyCredentialForAction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthenticationFailed"
      | "AuthenticationSuccessful"
      | "CredentialVerificationFailed"
      | "CredentialVerified"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONSUMER_CREDENTIAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONSUMER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRODUCER_CREDENTIAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRODUCER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROVIDER_CREDENTIAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROVIDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authenticate",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "didIssuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "didRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "didVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCallerDid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDidFromAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredCredentialForRole",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleRequirement",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantDidRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDidRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRequiredRolesAndCredentials",
    values: [string, BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedIssuer",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueCredential",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "resolveDid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revokeDidRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleRequirement",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedIssuer",
    values: [string, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCredentialForAction",
    values: [string, string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONSUMER_CREDENTIAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONSUMER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRODUCER_CREDENTIAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRODUCER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROVIDER_CREDENTIAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROVIDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "didRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCallerDid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDidFromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredCredentialForRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantDidRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasDidRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRequiredRolesAndCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolveDid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeDidRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCredentialForAction",
    data: BytesLike
  ): Result;
}

export namespace AuthenticationFailedEvent {
  export type InputTuple = [
    did: string,
    role: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [did: string, role: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    role: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthenticationSuccessfulEvent {
  export type InputTuple = [
    did: string,
    role: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [did: string, role: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    role: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialVerificationFailedEvent {
  export type InputTuple = [
    did: string,
    credentialType: string,
    credentialId: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    did: string,
    credentialType: string,
    credentialId: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    did: string;
    credentialType: string;
    credentialId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialVerifiedEvent {
  export type InputTuple = [
    did: string,
    credentialType: string,
    credentialId: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    did: string,
    credentialType: string,
    credentialId: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    did: string;
    credentialType: string;
    credentialId: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    did: string,
    role: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [did: string, role: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    role: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    did: string,
    role: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [did: string, role: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    role: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DidAuth1 extends BaseContract {
  connect(runner?: ContractRunner | null): DidAuth1;
  waitForDeployment(): Promise<this>;

  interface: DidAuth1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  CONSUMER_CREDENTIAL: TypedContractMethod<[], [string], "view">;

  CONSUMER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ISSUER_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  PRODUCER_CREDENTIAL: TypedContractMethod<[], [string], "view">;

  PRODUCER_ROLE: TypedContractMethod<[], [string], "view">;

  PROVIDER_CREDENTIAL: TypedContractMethod<[], [string], "view">;

  PROVIDER_ROLE: TypedContractMethod<[], [string], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  authenticate: TypedContractMethod<
    [did: string, role: BytesLike],
    [boolean],
    "view"
  >;

  didIssuer: TypedContractMethod<[], [string], "view">;

  didRegistry: TypedContractMethod<[], [string], "view">;

  didVerifier: TypedContractMethod<[], [string], "view">;

  getCallerDid: TypedContractMethod<[], [string], "view">;

  getDidFromAddress: TypedContractMethod<[addr: AddressLike], [string], "view">;

  getRequiredCredentialForRole: TypedContractMethod<
    [role: BytesLike],
    [string],
    "view"
  >;

  getRoleRequirement: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantDidRole: TypedContractMethod<
    [did: string, role: BytesLike],
    [void],
    "nonpayable"
  >;

  hasDidRole: TypedContractMethod<
    [did: string, role: BytesLike],
    [boolean],
    "view"
  >;

  hasRequiredRolesAndCredentials: TypedContractMethod<
    [did: string, roles: BytesLike[], credentialIds: BytesLike[]],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isTrustedIssuer: TypedContractMethod<
    [credentialType: string, issuer: AddressLike],
    [boolean],
    "view"
  >;

  issueCredential: TypedContractMethod<
    [credentialType: string, did: string, credentialId: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  resolveDid: TypedContractMethod<[did: string], [string], "view">;

  revokeDidRole: TypedContractMethod<
    [did: string, role: BytesLike],
    [void],
    "nonpayable"
  >;

  setRoleRequirement: TypedContractMethod<
    [role: BytesLike, requirement: string],
    [void],
    "nonpayable"
  >;

  setTrustedIssuer: TypedContractMethod<
    [credentialType: string, issuer: AddressLike, trusted: boolean],
    [void],
    "nonpayable"
  >;

  verifyCredentialForAction: TypedContractMethod<
    [did: string, credentialType: string, credentialId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CONSUMER_CREDENTIAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CONSUMER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ISSUER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRODUCER_CREDENTIAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRODUCER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROVIDER_CREDENTIAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROVIDER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authenticate"
  ): TypedContractMethod<[did: string, role: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "didIssuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "didRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "didVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCallerDid"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDidFromAddress"
  ): TypedContractMethod<[addr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRequiredCredentialForRole"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleRequirement"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantDidRole"
  ): TypedContractMethod<[did: string, role: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasDidRole"
  ): TypedContractMethod<[did: string, role: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRequiredRolesAndCredentials"
  ): TypedContractMethod<
    [did: string, roles: BytesLike[], credentialIds: BytesLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTrustedIssuer"
  ): TypedContractMethod<
    [credentialType: string, issuer: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "issueCredential"
  ): TypedContractMethod<
    [credentialType: string, did: string, credentialId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resolveDid"
  ): TypedContractMethod<[did: string], [string], "view">;
  getFunction(
    nameOrSignature: "revokeDidRole"
  ): TypedContractMethod<[did: string, role: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoleRequirement"
  ): TypedContractMethod<
    [role: BytesLike, requirement: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedIssuer"
  ): TypedContractMethod<
    [credentialType: string, issuer: AddressLike, trusted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyCredentialForAction"
  ): TypedContractMethod<
    [did: string, credentialType: string, credentialId: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "AuthenticationFailed"
  ): TypedContractEvent<
    AuthenticationFailedEvent.InputTuple,
    AuthenticationFailedEvent.OutputTuple,
    AuthenticationFailedEvent.OutputObject
  >;
  getEvent(
    key: "AuthenticationSuccessful"
  ): TypedContractEvent<
    AuthenticationSuccessfulEvent.InputTuple,
    AuthenticationSuccessfulEvent.OutputTuple,
    AuthenticationSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "CredentialVerificationFailed"
  ): TypedContractEvent<
    CredentialVerificationFailedEvent.InputTuple,
    CredentialVerificationFailedEvent.OutputTuple,
    CredentialVerificationFailedEvent.OutputObject
  >;
  getEvent(
    key: "CredentialVerified"
  ): TypedContractEvent<
    CredentialVerifiedEvent.InputTuple,
    CredentialVerifiedEvent.OutputTuple,
    CredentialVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AuthenticationFailed(string,bytes32,uint256)": TypedContractEvent<
      AuthenticationFailedEvent.InputTuple,
      AuthenticationFailedEvent.OutputTuple,
      AuthenticationFailedEvent.OutputObject
    >;
    AuthenticationFailed: TypedContractEvent<
      AuthenticationFailedEvent.InputTuple,
      AuthenticationFailedEvent.OutputTuple,
      AuthenticationFailedEvent.OutputObject
    >;

    "AuthenticationSuccessful(string,bytes32,uint256)": TypedContractEvent<
      AuthenticationSuccessfulEvent.InputTuple,
      AuthenticationSuccessfulEvent.OutputTuple,
      AuthenticationSuccessfulEvent.OutputObject
    >;
    AuthenticationSuccessful: TypedContractEvent<
      AuthenticationSuccessfulEvent.InputTuple,
      AuthenticationSuccessfulEvent.OutputTuple,
      AuthenticationSuccessfulEvent.OutputObject
    >;

    "CredentialVerificationFailed(string,string,bytes32,uint256)": TypedContractEvent<
      CredentialVerificationFailedEvent.InputTuple,
      CredentialVerificationFailedEvent.OutputTuple,
      CredentialVerificationFailedEvent.OutputObject
    >;
    CredentialVerificationFailed: TypedContractEvent<
      CredentialVerificationFailedEvent.InputTuple,
      CredentialVerificationFailedEvent.OutputTuple,
      CredentialVerificationFailedEvent.OutputObject
    >;

    "CredentialVerified(string,string,bytes32,uint256)": TypedContractEvent<
      CredentialVerifiedEvent.InputTuple,
      CredentialVerifiedEvent.OutputTuple,
      CredentialVerifiedEvent.OutputObject
    >;
    CredentialVerified: TypedContractEvent<
      CredentialVerifiedEvent.InputTuple,
      CredentialVerifiedEvent.OutputTuple,
      CredentialVerifiedEvent.OutputObject
    >;

    "RoleGranted(string,bytes32,uint256)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(string,bytes32,uint256)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
