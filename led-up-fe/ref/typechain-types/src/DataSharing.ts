/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DataSharing {
  export type AgreementStruct = {
    agreementId: string;
    requester: AddressLike;
    provider: AddressLike;
    dataType: string;
    validUntil: BigNumberish;
    revoked: boolean;
    createdAt: BigNumberish;
    fee: BigNumberish;
  };

  export type AgreementStructOutput = [
    agreementId: string,
    requester: string,
    provider: string,
    dataType: string,
    validUntil: bigint,
    revoked: boolean,
    createdAt: bigint,
    fee: bigint
  ] & {
    agreementId: string;
    requester: string;
    provider: string;
    dataType: string;
    validUntil: bigint;
    revoked: boolean;
    createdAt: bigint;
    fee: bigint;
  };
}

export interface DataSharingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createAgreement"
      | "extendAgreement"
      | "getAgreement"
      | "getProviderAgreements"
      | "getRequesterAgreements"
      | "isAgreementValid"
      | "minAgreementDuration"
      | "owner"
      | "platformFeePercent"
      | "renounceOwnership"
      | "revokeAgreement"
      | "transferOwnership"
      | "updateMinDuration"
      | "updatePlatformFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgreementCreated"
      | "AgreementExtended"
      | "AgreementRevoked"
      | "MinDurationUpdated"
      | "OwnershipTransferred"
      | "PlatformFeeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [AddressLike, AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extendAgreement",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderAgreements",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequesterAgreements",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAgreementValid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minAgreementDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAgreement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequesterAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAgreementValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAgreementDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
}

export namespace AgreementCreatedEvent {
  export type InputTuple = [
    agreementId: string,
    requester: AddressLike,
    provider: AddressLike,
    dataType: string,
    validUntil: BigNumberish
  ];
  export type OutputTuple = [
    agreementId: string,
    requester: string,
    provider: string,
    dataType: string,
    validUntil: bigint
  ];
  export interface OutputObject {
    agreementId: string;
    requester: string;
    provider: string;
    dataType: string;
    validUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementExtendedEvent {
  export type InputTuple = [agreementId: string, newValidUntil: BigNumberish];
  export type OutputTuple = [agreementId: string, newValidUntil: bigint];
  export interface OutputObject {
    agreementId: string;
    newValidUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgreementRevokedEvent {
  export type InputTuple = [agreementId: string, revokedBy: AddressLike];
  export type OutputTuple = [agreementId: string, revokedBy: string];
  export interface OutputObject {
    agreementId: string;
    revokedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinDurationUpdatedEvent {
  export type InputTuple = [
    oldDuration: BigNumberish,
    newDuration: BigNumberish
  ];
  export type OutputTuple = [oldDuration: bigint, newDuration: bigint];
  export interface OutputObject {
    oldDuration: bigint;
    newDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataSharing extends BaseContract {
  connect(runner?: ContractRunner | null): DataSharing;
  waitForDeployment(): Promise<this>;

  interface: DataSharingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createAgreement: TypedContractMethod<
    [
      requester: AddressLike,
      provider: AddressLike,
      dataType: string,
      validUntil: BigNumberish,
      fee: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  extendAgreement: TypedContractMethod<
    [agreementId: string, newValidUntil: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAgreement: TypedContractMethod<
    [agreementId: string],
    [DataSharing.AgreementStructOutput],
    "view"
  >;

  getProviderAgreements: TypedContractMethod<
    [provider: AddressLike],
    [string[]],
    "view"
  >;

  getRequesterAgreements: TypedContractMethod<
    [requester: AddressLike],
    [string[]],
    "view"
  >;

  isAgreementValid: TypedContractMethod<
    [agreementId: string],
    [boolean],
    "view"
  >;

  minAgreementDuration: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  platformFeePercent: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeAgreement: TypedContractMethod<
    [agreementId: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMinDuration: TypedContractMethod<
    [newDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFeePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createAgreement"
  ): TypedContractMethod<
    [
      requester: AddressLike,
      provider: AddressLike,
      dataType: string,
      validUntil: BigNumberish,
      fee: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "extendAgreement"
  ): TypedContractMethod<
    [agreementId: string, newValidUntil: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAgreement"
  ): TypedContractMethod<
    [agreementId: string],
    [DataSharing.AgreementStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProviderAgreements"
  ): TypedContractMethod<[provider: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRequesterAgreements"
  ): TypedContractMethod<[requester: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "isAgreementValid"
  ): TypedContractMethod<[agreementId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "minAgreementDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAgreement"
  ): TypedContractMethod<[agreementId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinDuration"
  ): TypedContractMethod<[newDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFeePercent: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AgreementCreated"
  ): TypedContractEvent<
    AgreementCreatedEvent.InputTuple,
    AgreementCreatedEvent.OutputTuple,
    AgreementCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementExtended"
  ): TypedContractEvent<
    AgreementExtendedEvent.InputTuple,
    AgreementExtendedEvent.OutputTuple,
    AgreementExtendedEvent.OutputObject
  >;
  getEvent(
    key: "AgreementRevoked"
  ): TypedContractEvent<
    AgreementRevokedEvent.InputTuple,
    AgreementRevokedEvent.OutputTuple,
    AgreementRevokedEvent.OutputObject
  >;
  getEvent(
    key: "MinDurationUpdated"
  ): TypedContractEvent<
    MinDurationUpdatedEvent.InputTuple,
    MinDurationUpdatedEvent.OutputTuple,
    MinDurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;

  filters: {
    "AgreementCreated(string,address,address,string,uint256)": TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;
    AgreementCreated: TypedContractEvent<
      AgreementCreatedEvent.InputTuple,
      AgreementCreatedEvent.OutputTuple,
      AgreementCreatedEvent.OutputObject
    >;

    "AgreementExtended(string,uint256)": TypedContractEvent<
      AgreementExtendedEvent.InputTuple,
      AgreementExtendedEvent.OutputTuple,
      AgreementExtendedEvent.OutputObject
    >;
    AgreementExtended: TypedContractEvent<
      AgreementExtendedEvent.InputTuple,
      AgreementExtendedEvent.OutputTuple,
      AgreementExtendedEvent.OutputObject
    >;

    "AgreementRevoked(string,address)": TypedContractEvent<
      AgreementRevokedEvent.InputTuple,
      AgreementRevokedEvent.OutputTuple,
      AgreementRevokedEvent.OutputObject
    >;
    AgreementRevoked: TypedContractEvent<
      AgreementRevokedEvent.InputTuple,
      AgreementRevokedEvent.OutputTuple,
      AgreementRevokedEvent.OutputObject
    >;

    "MinDurationUpdated(uint256,uint256)": TypedContractEvent<
      MinDurationUpdatedEvent.InputTuple,
      MinDurationUpdatedEvent.OutputTuple,
      MinDurationUpdatedEvent.OutputObject
    >;
    MinDurationUpdated: TypedContractEvent<
      MinDurationUpdatedEvent.InputTuple,
      MinDurationUpdatedEvent.OutputTuple,
      MinDurationUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256,uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
  };
}
