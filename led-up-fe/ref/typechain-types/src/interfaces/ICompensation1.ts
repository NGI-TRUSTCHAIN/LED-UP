/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICompensation1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeServiceFee"
      | "changeTokenAddress"
      | "changeUnitPrice"
      | "getMinimumWithdrawAmount"
      | "getPaymentTokenAddress"
      | "getProducerBalance()"
      | "getProducerBalance(address)"
      | "getProviderBalance"
      | "getServiceFee"
      | "getUnitPrice"
      | "pauseService"
      | "processPayment"
      | "producerExist"
      | "removeProducer"
      | "setMinimumWithdrawAmount"
      | "unpauseService"
      | "verifyPayment"
      | "withdrawProducerBalance"
      | "withdrawServiceFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PaymentProcessed"
      | "ProducerPaid"
      | "ProducerRemoved"
      | "ServiceFeeChanged"
      | "ServiceFeeWithdrawn"
      | "UnitPriceChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeServiceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeUnitPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumWithdrawAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProducerBalance()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProducerBalance(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnitPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processPayment",
    values: [AddressLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "producerExist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProducer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumWithdrawAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPayment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProducerBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawServiceFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeUnitPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProducerBalance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProducerBalance(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviderBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnitPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "producerExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProducerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawServiceFee",
    data: BytesLike
  ): Result;
}

export namespace PaymentProcessedEvent {
  export type InputTuple = [
    _producer: AddressLike,
    _consumer: AddressLike,
    amount: BigNumberish,
    serviceFee: BigNumberish
  ];
  export type OutputTuple = [
    _producer: string,
    _consumer: string,
    amount: bigint,
    serviceFee: bigint
  ];
  export interface OutputObject {
    _producer: string;
    _consumer: string;
    amount: bigint;
    serviceFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProducerPaidEvent {
  export type InputTuple = [
    producer: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    producer: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    producer: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProducerRemovedEvent {
  export type InputTuple = [producer: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [producer: string, timestamp: bigint];
  export interface OutputObject {
    producer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceFeeChangedEvent {
  export type InputTuple = [
    initiator: AddressLike,
    oldServiceFee: BigNumberish,
    newServiceFee: BigNumberish
  ];
  export type OutputTuple = [
    initiator: string,
    oldServiceFee: bigint,
    newServiceFee: bigint
  ];
  export interface OutputObject {
    initiator: string;
    oldServiceFee: bigint;
    newServiceFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ServiceFeeWithdrawnEvent {
  export type InputTuple = [
    wallet: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [wallet: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    wallet: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnitPriceChangedEvent {
  export type InputTuple = [
    initiator: AddressLike,
    oldUnitPrice: BigNumberish,
    newUnitPrice: BigNumberish
  ];
  export type OutputTuple = [
    initiator: string,
    oldUnitPrice: bigint,
    newUnitPrice: bigint
  ];
  export interface OutputObject {
    initiator: string;
    oldUnitPrice: bigint;
    newUnitPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICompensation1 extends BaseContract {
  connect(runner?: ContractRunner | null): ICompensation1;
  waitForDeployment(): Promise<this>;

  interface: ICompensation1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeServiceFee: TypedContractMethod<
    [_newServiceFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeTokenAddress: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  changeUnitPrice: TypedContractMethod<
    [_newUnitPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getMinimumWithdrawAmount: TypedContractMethod<[], [bigint], "view">;

  getPaymentTokenAddress: TypedContractMethod<[], [string], "view">;

  "getProducerBalance()": TypedContractMethod<[], [bigint], "view">;

  "getProducerBalance(address)": TypedContractMethod<
    [_producer: AddressLike],
    [bigint],
    "view"
  >;

  getProviderBalance: TypedContractMethod<[], [bigint], "view">;

  getServiceFee: TypedContractMethod<[], [bigint], "view">;

  getUnitPrice: TypedContractMethod<[], [bigint], "view">;

  pauseService: TypedContractMethod<[], [void], "nonpayable">;

  processPayment: TypedContractMethod<
    [
      _producer: AddressLike,
      _recordId: string,
      dataSize: BigNumberish,
      consumerDid: string
    ],
    [void],
    "nonpayable"
  >;

  producerExist: TypedContractMethod<
    [_producer: AddressLike],
    [boolean],
    "view"
  >;

  removeProducer: TypedContractMethod<
    [_producer: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinimumWithdrawAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpauseService: TypedContractMethod<[], [void], "nonpayable">;

  verifyPayment: TypedContractMethod<[_recordId: string], [boolean], "view">;

  withdrawProducerBalance: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawServiceFee: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeServiceFee"
  ): TypedContractMethod<[_newServiceFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeTokenAddress"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeUnitPrice"
  ): TypedContractMethod<[_newUnitPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMinimumWithdrawAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPaymentTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProducerBalance()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProducerBalance(address)"
  ): TypedContractMethod<[_producer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProviderBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getServiceFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnitPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pauseService"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "processPayment"
  ): TypedContractMethod<
    [
      _producer: AddressLike,
      _recordId: string,
      dataSize: BigNumberish,
      consumerDid: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "producerExist"
  ): TypedContractMethod<[_producer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeProducer"
  ): TypedContractMethod<[_producer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinimumWithdrawAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpauseService"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyPayment"
  ): TypedContractMethod<[_recordId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawProducerBalance"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawServiceFee"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "PaymentProcessed"
  ): TypedContractEvent<
    PaymentProcessedEvent.InputTuple,
    PaymentProcessedEvent.OutputTuple,
    PaymentProcessedEvent.OutputObject
  >;
  getEvent(
    key: "ProducerPaid"
  ): TypedContractEvent<
    ProducerPaidEvent.InputTuple,
    ProducerPaidEvent.OutputTuple,
    ProducerPaidEvent.OutputObject
  >;
  getEvent(
    key: "ProducerRemoved"
  ): TypedContractEvent<
    ProducerRemovedEvent.InputTuple,
    ProducerRemovedEvent.OutputTuple,
    ProducerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ServiceFeeChanged"
  ): TypedContractEvent<
    ServiceFeeChangedEvent.InputTuple,
    ServiceFeeChangedEvent.OutputTuple,
    ServiceFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "ServiceFeeWithdrawn"
  ): TypedContractEvent<
    ServiceFeeWithdrawnEvent.InputTuple,
    ServiceFeeWithdrawnEvent.OutputTuple,
    ServiceFeeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "UnitPriceChanged"
  ): TypedContractEvent<
    UnitPriceChangedEvent.InputTuple,
    UnitPriceChangedEvent.OutputTuple,
    UnitPriceChangedEvent.OutputObject
  >;

  filters: {
    "PaymentProcessed(address,address,uint256,uint256)": TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;
    PaymentProcessed: TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;

    "ProducerPaid(address,uint256,uint256)": TypedContractEvent<
      ProducerPaidEvent.InputTuple,
      ProducerPaidEvent.OutputTuple,
      ProducerPaidEvent.OutputObject
    >;
    ProducerPaid: TypedContractEvent<
      ProducerPaidEvent.InputTuple,
      ProducerPaidEvent.OutputTuple,
      ProducerPaidEvent.OutputObject
    >;

    "ProducerRemoved(address,uint256)": TypedContractEvent<
      ProducerRemovedEvent.InputTuple,
      ProducerRemovedEvent.OutputTuple,
      ProducerRemovedEvent.OutputObject
    >;
    ProducerRemoved: TypedContractEvent<
      ProducerRemovedEvent.InputTuple,
      ProducerRemovedEvent.OutputTuple,
      ProducerRemovedEvent.OutputObject
    >;

    "ServiceFeeChanged(address,uint256,uint256)": TypedContractEvent<
      ServiceFeeChangedEvent.InputTuple,
      ServiceFeeChangedEvent.OutputTuple,
      ServiceFeeChangedEvent.OutputObject
    >;
    ServiceFeeChanged: TypedContractEvent<
      ServiceFeeChangedEvent.InputTuple,
      ServiceFeeChangedEvent.OutputTuple,
      ServiceFeeChangedEvent.OutputObject
    >;

    "ServiceFeeWithdrawn(address,uint256,uint256)": TypedContractEvent<
      ServiceFeeWithdrawnEvent.InputTuple,
      ServiceFeeWithdrawnEvent.OutputTuple,
      ServiceFeeWithdrawnEvent.OutputObject
    >;
    ServiceFeeWithdrawn: TypedContractEvent<
      ServiceFeeWithdrawnEvent.InputTuple,
      ServiceFeeWithdrawnEvent.OutputTuple,
      ServiceFeeWithdrawnEvent.OutputObject
    >;

    "UnitPriceChanged(address,uint256,uint256)": TypedContractEvent<
      UnitPriceChangedEvent.InputTuple,
      UnitPriceChangedEvent.OutputTuple,
      UnitPriceChangedEvent.OutputObject
    >;
    UnitPriceChanged: TypedContractEvent<
      UnitPriceChangedEvent.InputTuple,
      UnitPriceChangedEvent.OutputTuple,
      UnitPriceChangedEvent.OutputObject
    >;
  };
}
