/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DataAccessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accessFee"
      | "checkAccess"
      | "dataPayments"
      | "dataProviders"
      | "owner"
      | "paidAccess"
      | "purchaseAccess"
      | "registerData"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateAccessFee"
      | "withdrawPayment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DataRegistered"
      | "FeeUpdated"
      | "OwnershipTransferred"
      | "PaymentReceived"
      | "PaymentWithdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "accessFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkAccess",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dataPayments",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dataProviders",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paidAccess",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccessFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayment",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "accessFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paidAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccessFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayment",
    data: BytesLike
  ): Result;
}

export namespace DataRegisteredEvent {
  export type InputTuple = [
    dataId: string,
    provider: AddressLike,
    fee: BigNumberish
  ];
  export type OutputTuple = [dataId: string, provider: string, fee: bigint];
  export interface OutputObject {
    dataId: string;
    provider: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReceivedEvent {
  export type InputTuple = [
    consumer: AddressLike,
    dataId: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [consumer: string, dataId: string, amount: bigint];
  export interface OutputObject {
    consumer: string;
    dataId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentWithdrawnEvent {
  export type InputTuple = [
    provider: AddressLike,
    dataId: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [provider: string, dataId: string, amount: bigint];
  export interface OutputObject {
    provider: string;
    dataId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataAccess extends BaseContract {
  connect(runner?: ContractRunner | null): DataAccess;
  waitForDeployment(): Promise<this>;

  interface: DataAccessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accessFee: TypedContractMethod<[], [bigint], "view">;

  checkAccess: TypedContractMethod<
    [consumer: AddressLike, dataId: string],
    [boolean],
    "view"
  >;

  dataPayments: TypedContractMethod<[arg0: string], [bigint], "view">;

  dataProviders: TypedContractMethod<[arg0: string], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paidAccess: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  purchaseAccess: TypedContractMethod<[dataId: string], [void], "payable">;

  registerData: TypedContractMethod<
    [dataId: string, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAccessFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawPayment: TypedContractMethod<[dataId: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accessFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkAccess"
  ): TypedContractMethod<
    [consumer: AddressLike, dataId: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "dataPayments"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "dataProviders"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paidAccess"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "purchaseAccess"
  ): TypedContractMethod<[dataId: string], [void], "payable">;
  getFunction(
    nameOrSignature: "registerData"
  ): TypedContractMethod<
    [dataId: string, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAccessFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPayment"
  ): TypedContractMethod<[dataId: string], [void], "nonpayable">;

  getEvent(
    key: "DataRegistered"
  ): TypedContractEvent<
    DataRegisteredEvent.InputTuple,
    DataRegisteredEvent.OutputTuple,
    DataRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReceived"
  ): TypedContractEvent<
    PaymentReceivedEvent.InputTuple,
    PaymentReceivedEvent.OutputTuple,
    PaymentReceivedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentWithdrawn"
  ): TypedContractEvent<
    PaymentWithdrawnEvent.InputTuple,
    PaymentWithdrawnEvent.OutputTuple,
    PaymentWithdrawnEvent.OutputObject
  >;

  filters: {
    "DataRegistered(string,address,uint256)": TypedContractEvent<
      DataRegisteredEvent.InputTuple,
      DataRegisteredEvent.OutputTuple,
      DataRegisteredEvent.OutputObject
    >;
    DataRegistered: TypedContractEvent<
      DataRegisteredEvent.InputTuple,
      DataRegisteredEvent.OutputTuple,
      DataRegisteredEvent.OutputObject
    >;

    "FeeUpdated(uint256,uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentReceived(address,string,uint256)": TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;
    PaymentReceived: TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;

    "PaymentWithdrawn(address,string,uint256)": TypedContractEvent<
      PaymentWithdrawnEvent.InputTuple,
      PaymentWithdrawnEvent.OutputTuple,
      PaymentWithdrawnEvent.OutputObject
    >;
    PaymentWithdrawn: TypedContractEvent<
      PaymentWithdrawnEvent.InputTuple,
      PaymentWithdrawnEvent.OutputTuple,
      PaymentWithdrawnEvent.OutputObject
    >;
  };
}
