/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DataRegistry1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "addProvider"
      | "checkAccess"
      | "didAuth"
      | "getProducerMetadata"
      | "getProducerRecords"
      | "getRecordInfo"
      | "getRoleAdmin"
      | "getTotalRecords"
      | "grantRole"
      | "hasRole"
      | "isAuthorizedProvider"
      | "isRecordVerified"
      | "owner"
      | "pause"
      | "paused"
      | "registerProducer"
      | "registerRecord"
      | "removeProvider"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeAccess"
      | "revokeRole"
      | "shareData"
      | "shareToProvider"
      | "supportsInterface"
      | "transferOwnership"
      | "triggerAccess"
      | "unpause"
      | "updateCompensationAddress"
      | "updateDidAuthAddress"
      | "updateProducerConsent"
      | "updateRecord"
      | "verifyRecord"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "AccessTriggered"
      | "CompensationUpdated"
      | "ConsentStatusChanged"
      | "ConsumerAuthorized"
      | "DidAuthUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "ProviderAdded"
      | "ProviderAuthorized"
      | "ProviderRemoved"
      | "RecordRegistered"
      | "RecordStatusChanged"
      | "RecordUpdated"
      | "RecordVerified"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAccess",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "didAuth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProducerMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProducerRecords",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRecords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedProvider",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRecordVerified",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerProducer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRecord",
    values: [string, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shareData",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToProvider",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerAccess",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCompensationAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDidAuthAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProducerConsent",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRecord",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRecord",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didAuth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProducerMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProducerRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecordInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRecordVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shareData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shareToProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCompensationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDidAuthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProducerConsent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRecord",
    data: BytesLike
  ): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [
    recordId: BytesLike,
    consumer: AddressLike,
    consumerDid: string,
    expiration: BigNumberish,
    accessLevel: BigNumberish
  ];
  export type OutputTuple = [
    recordId: string,
    consumer: string,
    consumerDid: string,
    expiration: bigint,
    accessLevel: bigint
  ];
  export interface OutputObject {
    recordId: string;
    consumer: string;
    consumerDid: string;
    expiration: bigint;
    accessLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [
    recordId: BytesLike,
    consumer: AddressLike,
    consumerDid: string,
    revoker: AddressLike
  ];
  export type OutputTuple = [
    recordId: string,
    consumer: string,
    consumerDid: string,
    revoker: string
  ];
  export interface OutputObject {
    recordId: string;
    consumer: string;
    consumerDid: string;
    revoker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessTriggeredEvent {
  export type InputTuple = [
    recordId: BytesLike,
    consumer: AddressLike,
    consumerDid: string,
    accessLevel: BigNumberish
  ];
  export type OutputTuple = [
    recordId: string,
    consumer: string,
    consumerDid: string,
    accessLevel: bigint
  ];
  export interface OutputObject {
    recordId: string;
    consumer: string;
    consumerDid: string;
    accessLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompensationUpdatedEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsentStatusChangedEvent {
  export type InputTuple = [
    provider: AddressLike,
    status: BigNumberish,
    updater: AddressLike
  ];
  export type OutputTuple = [provider: string, status: bigint, updater: string];
  export interface OutputObject {
    provider: string;
    status: bigint;
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsumerAuthorizedEvent {
  export type InputTuple = [
    recordId: BytesLike,
    consumer: AddressLike,
    accessLevel: BigNumberish,
    expiration: BigNumberish
  ];
  export type OutputTuple = [
    recordId: string,
    consumer: string,
    accessLevel: bigint,
    expiration: bigint
  ];
  export interface OutputObject {
    recordId: string;
    consumer: string;
    accessLevel: bigint;
    expiration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DidAuthUpdatedEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderAddedEvent {
  export type InputTuple = [provider: AddressLike];
  export type OutputTuple = [provider: string];
  export interface OutputObject {
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderAuthorizedEvent {
  export type InputTuple = [
    recordId: BytesLike,
    provider: AddressLike,
    accessLevel: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    recordId: string,
    provider: string,
    accessLevel: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    recordId: string;
    provider: string;
    accessLevel: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderRemovedEvent {
  export type InputTuple = [provider: AddressLike];
  export type OutputTuple = [provider: string];
  export interface OutputObject {
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordRegisteredEvent {
  export type InputTuple = [
    recordId: BytesLike,
    didHash: BytesLike,
    cidHash: BytesLike,
    contentHash: BytesLike,
    provider: AddressLike
  ];
  export type OutputTuple = [
    recordId: string,
    didHash: string,
    cidHash: string,
    contentHash: string,
    provider: string
  ];
  export interface OutputObject {
    recordId: string;
    didHash: string;
    cidHash: string;
    contentHash: string;
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordStatusChangedEvent {
  export type InputTuple = [
    recordId: BytesLike,
    status: BigNumberish,
    updater: AddressLike
  ];
  export type OutputTuple = [recordId: string, status: bigint, updater: string];
  export interface OutputObject {
    recordId: string;
    status: bigint;
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordUpdatedEvent {
  export type InputTuple = [
    recordId: BytesLike,
    cidHash: BytesLike,
    contentHash: BytesLike,
    provider: AddressLike
  ];
  export type OutputTuple = [
    recordId: string,
    cidHash: string,
    contentHash: string,
    provider: string
  ];
  export interface OutputObject {
    recordId: string;
    cidHash: string;
    contentHash: string;
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordVerifiedEvent {
  export type InputTuple = [recordId: BytesLike, verifier: AddressLike];
  export type OutputTuple = [recordId: string, verifier: string];
  export interface OutputObject {
    recordId: string;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataRegistry1 extends BaseContract {
  connect(runner?: ContractRunner | null): DataRegistry1;
  waitForDeployment(): Promise<this>;

  interface: DataRegistry1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  addProvider: TypedContractMethod<
    [_provider: AddressLike],
    [void],
    "nonpayable"
  >;

  checkAccess: TypedContractMethod<
    [recordIdStr: string, consumerAddress: AddressLike],
    [
      [boolean, bigint, bigint, boolean] & {
        hasAccess: boolean;
        expiration: bigint;
        accessLevel: bigint;
        isRevoked: boolean;
      }
    ],
    "view"
  >;

  didAuth: TypedContractMethod<[], [string], "view">;

  getProducerMetadata: TypedContractMethod<
    [producer: AddressLike],
    [
      [string, bigint, bigint, boolean, bigint, bigint] & {
        didHash: string;
        consent: bigint;
        entries: bigint;
        isActive: boolean;
        lastUpdated: bigint;
        nonce: bigint;
      }
    ],
    "view"
  >;

  getProducerRecords: TypedContractMethod<
    [producer: AddressLike],
    [string[]],
    "view"
  >;

  getRecordInfo: TypedContractMethod<
    [recordIdStr: string],
    [
      [string, bigint, bigint, bigint, boolean] & {
        producer: string;
        dataSize: bigint;
        sharedCount: bigint;
        updatedAt: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalRecords: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isAuthorizedProvider: TypedContractMethod<
    [_provider: AddressLike, recordId: BytesLike],
    [boolean],
    "view"
  >;

  isRecordVerified: TypedContractMethod<
    [recordIdStr: string],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerProducer: TypedContractMethod<
    [_status: BigNumberish, _consent: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerRecord: TypedContractMethod<
    [
      recordIdStr: string,
      cid: string,
      contentHash: BytesLike,
      resourceType: BigNumberish,
      dataSize: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeProvider: TypedContractMethod<
    [_provider: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAccess: TypedContractMethod<
    [recordIdStr: string, consumerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  shareData: TypedContractMethod<
    [
      recordIdStr: string,
      consumerAddress: AddressLike,
      accessDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  shareToProvider: TypedContractMethod<
    [
      recordIdStr: string,
      provider: AddressLike,
      accessDuration: BigNumberish,
      accessLevel: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  triggerAccess: TypedContractMethod<
    [recordIdStr: string],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateCompensationAddress: TypedContractMethod<
    [_compensationAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDidAuthAddress: TypedContractMethod<
    [_didAuthAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateProducerConsent: TypedContractMethod<
    [producer: AddressLike, consentStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRecord: TypedContractMethod<
    [recordIdStr: string, cid: string, contentHash: BytesLike],
    [void],
    "nonpayable"
  >;

  verifyRecord: TypedContractMethod<
    [recordIdStr: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addProvider"
  ): TypedContractMethod<[_provider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkAccess"
  ): TypedContractMethod<
    [recordIdStr: string, consumerAddress: AddressLike],
    [
      [boolean, bigint, bigint, boolean] & {
        hasAccess: boolean;
        expiration: bigint;
        accessLevel: bigint;
        isRevoked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "didAuth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProducerMetadata"
  ): TypedContractMethod<
    [producer: AddressLike],
    [
      [string, bigint, bigint, boolean, bigint, bigint] & {
        didHash: string;
        consent: bigint;
        entries: bigint;
        isActive: boolean;
        lastUpdated: bigint;
        nonce: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProducerRecords"
  ): TypedContractMethod<[producer: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRecordInfo"
  ): TypedContractMethod<
    [recordIdStr: string],
    [
      [string, bigint, bigint, bigint, boolean] & {
        producer: string;
        dataSize: bigint;
        sharedCount: bigint;
        updatedAt: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalRecords"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedProvider"
  ): TypedContractMethod<
    [_provider: AddressLike, recordId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRecordVerified"
  ): TypedContractMethod<[recordIdStr: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerProducer"
  ): TypedContractMethod<
    [_status: BigNumberish, _consent: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerRecord"
  ): TypedContractMethod<
    [
      recordIdStr: string,
      cid: string,
      contentHash: BytesLike,
      resourceType: BigNumberish,
      dataSize: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeProvider"
  ): TypedContractMethod<[_provider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<
    [recordIdStr: string, consumerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shareData"
  ): TypedContractMethod<
    [
      recordIdStr: string,
      consumerAddress: AddressLike,
      accessDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shareToProvider"
  ): TypedContractMethod<
    [
      recordIdStr: string,
      provider: AddressLike,
      accessDuration: BigNumberish,
      accessLevel: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "triggerAccess"
  ): TypedContractMethod<[recordIdStr: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCompensationAddress"
  ): TypedContractMethod<
    [_compensationAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDidAuthAddress"
  ): TypedContractMethod<[_didAuthAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProducerConsent"
  ): TypedContractMethod<
    [producer: AddressLike, consentStatus: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRecord"
  ): TypedContractMethod<
    [recordIdStr: string, cid: string, contentHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyRecord"
  ): TypedContractMethod<[recordIdStr: string], [void], "nonpayable">;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "AccessTriggered"
  ): TypedContractEvent<
    AccessTriggeredEvent.InputTuple,
    AccessTriggeredEvent.OutputTuple,
    AccessTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "CompensationUpdated"
  ): TypedContractEvent<
    CompensationUpdatedEvent.InputTuple,
    CompensationUpdatedEvent.OutputTuple,
    CompensationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ConsentStatusChanged"
  ): TypedContractEvent<
    ConsentStatusChangedEvent.InputTuple,
    ConsentStatusChangedEvent.OutputTuple,
    ConsentStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "ConsumerAuthorized"
  ): TypedContractEvent<
    ConsumerAuthorizedEvent.InputTuple,
    ConsumerAuthorizedEvent.OutputTuple,
    ConsumerAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "DidAuthUpdated"
  ): TypedContractEvent<
    DidAuthUpdatedEvent.InputTuple,
    DidAuthUpdatedEvent.OutputTuple,
    DidAuthUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderAdded"
  ): TypedContractEvent<
    ProviderAddedEvent.InputTuple,
    ProviderAddedEvent.OutputTuple,
    ProviderAddedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderAuthorized"
  ): TypedContractEvent<
    ProviderAuthorizedEvent.InputTuple,
    ProviderAuthorizedEvent.OutputTuple,
    ProviderAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderRemoved"
  ): TypedContractEvent<
    ProviderRemovedEvent.InputTuple,
    ProviderRemovedEvent.OutputTuple,
    ProviderRemovedEvent.OutputObject
  >;
  getEvent(
    key: "RecordRegistered"
  ): TypedContractEvent<
    RecordRegisteredEvent.InputTuple,
    RecordRegisteredEvent.OutputTuple,
    RecordRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RecordStatusChanged"
  ): TypedContractEvent<
    RecordStatusChangedEvent.InputTuple,
    RecordStatusChangedEvent.OutputTuple,
    RecordStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "RecordUpdated"
  ): TypedContractEvent<
    RecordUpdatedEvent.InputTuple,
    RecordUpdatedEvent.OutputTuple,
    RecordUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RecordVerified"
  ): TypedContractEvent<
    RecordVerifiedEvent.InputTuple,
    RecordVerifiedEvent.OutputTuple,
    RecordVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AccessGranted(bytes32,address,string,uint40,uint8)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(bytes32,address,string,address)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "AccessTriggered(bytes32,address,string,uint8)": TypedContractEvent<
      AccessTriggeredEvent.InputTuple,
      AccessTriggeredEvent.OutputTuple,
      AccessTriggeredEvent.OutputObject
    >;
    AccessTriggered: TypedContractEvent<
      AccessTriggeredEvent.InputTuple,
      AccessTriggeredEvent.OutputTuple,
      AccessTriggeredEvent.OutputObject
    >;

    "CompensationUpdated(address,address)": TypedContractEvent<
      CompensationUpdatedEvent.InputTuple,
      CompensationUpdatedEvent.OutputTuple,
      CompensationUpdatedEvent.OutputObject
    >;
    CompensationUpdated: TypedContractEvent<
      CompensationUpdatedEvent.InputTuple,
      CompensationUpdatedEvent.OutputTuple,
      CompensationUpdatedEvent.OutputObject
    >;

    "ConsentStatusChanged(address,uint8,address)": TypedContractEvent<
      ConsentStatusChangedEvent.InputTuple,
      ConsentStatusChangedEvent.OutputTuple,
      ConsentStatusChangedEvent.OutputObject
    >;
    ConsentStatusChanged: TypedContractEvent<
      ConsentStatusChangedEvent.InputTuple,
      ConsentStatusChangedEvent.OutputTuple,
      ConsentStatusChangedEvent.OutputObject
    >;

    "ConsumerAuthorized(bytes32,address,uint8,uint40)": TypedContractEvent<
      ConsumerAuthorizedEvent.InputTuple,
      ConsumerAuthorizedEvent.OutputTuple,
      ConsumerAuthorizedEvent.OutputObject
    >;
    ConsumerAuthorized: TypedContractEvent<
      ConsumerAuthorizedEvent.InputTuple,
      ConsumerAuthorizedEvent.OutputTuple,
      ConsumerAuthorizedEvent.OutputObject
    >;

    "DidAuthUpdated(address,address)": TypedContractEvent<
      DidAuthUpdatedEvent.InputTuple,
      DidAuthUpdatedEvent.OutputTuple,
      DidAuthUpdatedEvent.OutputObject
    >;
    DidAuthUpdated: TypedContractEvent<
      DidAuthUpdatedEvent.InputTuple,
      DidAuthUpdatedEvent.OutputTuple,
      DidAuthUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProviderAdded(address)": TypedContractEvent<
      ProviderAddedEvent.InputTuple,
      ProviderAddedEvent.OutputTuple,
      ProviderAddedEvent.OutputObject
    >;
    ProviderAdded: TypedContractEvent<
      ProviderAddedEvent.InputTuple,
      ProviderAddedEvent.OutputTuple,
      ProviderAddedEvent.OutputObject
    >;

    "ProviderAuthorized(bytes32,address,uint8,uint40)": TypedContractEvent<
      ProviderAuthorizedEvent.InputTuple,
      ProviderAuthorizedEvent.OutputTuple,
      ProviderAuthorizedEvent.OutputObject
    >;
    ProviderAuthorized: TypedContractEvent<
      ProviderAuthorizedEvent.InputTuple,
      ProviderAuthorizedEvent.OutputTuple,
      ProviderAuthorizedEvent.OutputObject
    >;

    "ProviderRemoved(address)": TypedContractEvent<
      ProviderRemovedEvent.InputTuple,
      ProviderRemovedEvent.OutputTuple,
      ProviderRemovedEvent.OutputObject
    >;
    ProviderRemoved: TypedContractEvent<
      ProviderRemovedEvent.InputTuple,
      ProviderRemovedEvent.OutputTuple,
      ProviderRemovedEvent.OutputObject
    >;

    "RecordRegistered(bytes32,bytes32,bytes32,bytes32,address)": TypedContractEvent<
      RecordRegisteredEvent.InputTuple,
      RecordRegisteredEvent.OutputTuple,
      RecordRegisteredEvent.OutputObject
    >;
    RecordRegistered: TypedContractEvent<
      RecordRegisteredEvent.InputTuple,
      RecordRegisteredEvent.OutputTuple,
      RecordRegisteredEvent.OutputObject
    >;

    "RecordStatusChanged(bytes32,uint8,address)": TypedContractEvent<
      RecordStatusChangedEvent.InputTuple,
      RecordStatusChangedEvent.OutputTuple,
      RecordStatusChangedEvent.OutputObject
    >;
    RecordStatusChanged: TypedContractEvent<
      RecordStatusChangedEvent.InputTuple,
      RecordStatusChangedEvent.OutputTuple,
      RecordStatusChangedEvent.OutputObject
    >;

    "RecordUpdated(bytes32,bytes32,bytes32,address)": TypedContractEvent<
      RecordUpdatedEvent.InputTuple,
      RecordUpdatedEvent.OutputTuple,
      RecordUpdatedEvent.OutputObject
    >;
    RecordUpdated: TypedContractEvent<
      RecordUpdatedEvent.InputTuple,
      RecordUpdatedEvent.OutputTuple,
      RecordUpdatedEvent.OutputObject
    >;

    "RecordVerified(bytes32,address)": TypedContractEvent<
      RecordVerifiedEvent.InputTuple,
      RecordVerifiedEvent.OutputTuple,
      RecordVerifiedEvent.OutputObject
    >;
    RecordVerified: TypedContractEvent<
      RecordVerifiedEvent.InputTuple,
      RecordVerifiedEvent.OutputTuple,
      RecordVerifiedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
