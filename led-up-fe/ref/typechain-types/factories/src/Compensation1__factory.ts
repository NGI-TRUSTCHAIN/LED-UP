/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  Compensation1,
  Compensation1Interface,
} from "../../src/Compensation1";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_serviceFeePercent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_unitPrice",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_didAuthAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Compensation__InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__InvalidConsumer",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__InvalidConsumerDID",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__InvalidInputParam",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__InvalidProducer",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__InvalidProducerDID",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__InvalidRole",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__LowDepositAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__MinimumWithdrawAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__NoBalanceToWithdraw",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__OnlyOwnerCanWithdraw",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__ProducerAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "Compensation__TokenTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "EnforcedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpectedPause",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_producer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_consumer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "serviceFee",
        type: "uint256",
      },
    ],
    name: "PaymentProcessed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "producer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "ProducerPaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "producer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "ProducerRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "oldServiceFee",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "newServiceFee",
        type: "uint256",
      },
    ],
    name: "ServiceFeeChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "ServiceFeeWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "oldUnitPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newUnitPrice",
        type: "uint256",
      },
    ],
    name: "UnitPriceChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newServiceFee",
        type: "uint256",
      },
    ],
    name: "changeServiceFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    name: "changeTokenAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newUnitPrice",
        type: "uint256",
      },
    ],
    name: "changeUnitPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "didAuth",
    outputs: [
      {
        internalType: "contract DidAuth1",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_consumer",
        type: "address",
      },
    ],
    name: "getConsumerDid",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMinimumWithdrawAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPaymentTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProducerBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_producer",
        type: "address",
      },
    ],
    name: "getProducerBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_producer",
        type: "address",
      },
    ],
    name: "getProducerDid",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProviderBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getServiceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUnitPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pauseService",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "payments",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isPayed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_producer",
        type: "address",
      },
      {
        internalType: "string",
        name: "_recordId",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "dataSize",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "consumerDid",
        type: "string",
      },
    ],
    name: "processPayment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_producer",
        type: "address",
      },
    ],
    name: "producerExist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_producer",
        type: "address",
      },
    ],
    name: "removeProducer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "serviceFeeBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "setMinimumWithdrawAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpauseService",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_didAuthAddress",
        type: "address",
      },
    ],
    name: "updateDidAuthAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_recordId",
        type: "string",
      },
    ],
    name: "verifyPayment",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawProducerBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawServiceFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461012057601f61150438819003918201601f19168301916001600160401b038311848410176101255780849260a094604052833981010312610120576100478161013b565b6100536020830161013b565b9060408301519261006b60806060830151920161013b565b6001600160a01b03928316949091908515610107576000549560405196818682167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600160a81b031916176000908155678ac7230489e80000600355600555600180546001600160a01b03199081169686169690961790556002556004556008805490931691161790556113b490816101508239f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101205756fe608060408181526004908136101561001657600080fd5b600091823560e01c938463012a33aa146110a25750836301c61a3214610c9c5783630552f9ff14610c365783630a0137ab14610bdb57836311a1933c14610bbd5783631c681d9914610b275783631fa8c9ae14610b0557836320875d66146108895783633f185b6c146107605783634be3a6e9146106f1578363586d396b1461068d5783635a2153381461066f5783635c975abb1461064b578363715018a6146105f15783637418c968146105cc5783637af8bb5d146101715783637c878166146105ae5783638135c36f146104a85783638da5cb5b1461048157836394906bcf14610421578363c9cda91f146103c6578363d15070011461038d578363d32ad62214610365578363d3e256bf146102fe578363dea182c1146102d6578363e058e99714610298578363f2fde38b1461020f578363f9468713146101a157508263fc0c546a1461017657505063fe80c4f41461017157600080fd5b6111bb565b3461019d578160031936011261019d5760015490516001600160a01b039091168152602090f35b5080fd5b823461020c57602036600319011261020c5781359067ffffffffffffffff821161020c57506101d86101ea9260209236910161112c565b81845193828580945193849201611173565b8101600781520301902060ff6001825492015416825191825215156020820152f35b80fd5b34610294576020366003190112610294576102286110bd565b90610231611252565b6001600160a01b0391821692831561027e57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b503461019d57602036600319011261019d57806020926102b66110bd565b6102be611252565b6001600160a01b031681526006845220549051908152f35b503461019d578160031936011261019d5760015490516001600160a01b039091168152602090f35b90346102945760203660031901126102945781359161031b611252565b821561035757506002549082600255519081527fea943276b7af14e01ef5207cd2cee75f7c7b742afe03d223779a09627301965560203392a380f35b905163f0adf53360e01b8152fd5b503461019d578160031936011261019d5760085490516001600160a01b039091168152602090f35b503461019d57602036600319011261019d5760209181906001600160a01b036103b46110bd565b16815260068452205415159051908152f35b34610294576020366003190112610294576103df6110bd565b6103e7611252565b6001600160a01b03169182156104145750506bffffffffffffffffffffffff60a01b600154161760015580f35b5163f0adf53360e01b8152fd5b503461019d578160031936011261019d5760207f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9161045e611252565b61046661135c565b61046e61135c565b835460ff60a01b1916845551338152a180f35b503461019d578160031936011261019d57905490516001600160a01b039091168152602090f35b34610294576020366003190112610294578035916104c4611252565b6104cc61133b565b6005548084116105a057836104e09161132e565b600555600154815163a9059cbb60e01b81523084820190815260208082018790529192839182900360400190829089906001600160a01b03165af1908115610596578591610568575b501561055b5750504290307f0ec851daa65cf683ea50a214d0556df1c12c6c97741c24d6a433b81b01b8a1ef8480a480f35b51637024dad560e11b8152fd5b610589915060203d811161058f575b61058181836110d8565b8101906112e0565b85610529565b503d610577565b82513d87823e3d90fd5b50516306ba5aa760e11b8152fd5b503461019d578160031936011261019d576020906003549051908152f35b503461019d578160031936011261019d57806020923381526006845220549051908152f35b823461020c578060031936011261020c5761060a611252565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461019d578160031936011261019d5760ff6020925460a01c1690519015158152f35b503461019d578160031936011261019d576020906005549051908152f35b913461020c57602036600319011261020c5782359067ffffffffffffffff821161020c575060016106db60206106c9819660ff9536910161112c565b81865193828580945193849201611173565b8101600781520301902001541690519015158152f35b90346102945760203660031901126102945781359061070e611252565b81156107515791817fbef184c70b971ce37dd431ed022897a9211e97ca421f71da4c3aa85da4f6c5e593606093835493558051923384526020840152820152a180f35b5163f0adf53360e01b81529050fd5b9034610294576020806003193601126108855761077b6110bd565b91610784611252565b61078c61133b565b6001600160a01b03838116808752600684528287205495909490918790876107e8575b50857f7aeea51f76cf53bb0e38ea557afb288adf612290f445157ce8bf0e19fdcc4c76868683855260068252848181205551428152a280f35b600154855163a9059cbb60e01b81526001600160a01b03909416948401948552602085019890985291968593889391909116918391829060400103925af193841561087b577f7aeea51f76cf53bb0e38ea557afb288adf612290f445157ce8bf0e19fdcc4c76939461085e575b849386826107af565b61087490833d851161058f5761058181836110d8565b5085610855565b81513d87823e3d90fd5b8380fd5b346102945760209182600319360112610885578135926108a761133b565b6008548251632d5e71fb60e21b815233858201526001600160a01b03918216908781602481855afa908115610afb578891610ad9575b508051159182156109ff575b50506109f0576003548086106109e05733875260068352838720549081106109d05785116109c1573386526006825282862061092686825461132e565b9055600154835163a9059cbb60e01b815233868201908152602081018890529092849284928390036040019183918b91165af19182156109b757869261099a575b50501561055b5750504290337f9e6f10237a3bc28f40142a7f51474829ca0926a141b2aa82d169584162500fda8480a480f35b6109b09250803d1061058f5761058181836110d8565b8580610967565b83513d88823e3d90fd5b5050516379d9383360e11b8152fd5b505050516306ba5aa760e11b8152fd5b5050505163b2726f4960e01b8152fd5b5050516351a846b160e11b8152fd5b855163cb3e1fe760e01b815292509084838881855afa928315610acf57908592918a94610a96575b5090610a4e91875180958194829363e0bb933d60e01b84528b8d8501526044840190611196565b90602483015203915afa908115610a8c578791610a6f575b501587806108e9565b610a869150833d851161058f5761058181836110d8565b87610a66565b84513d89823e3d90fd5b838193949295503d8311610ac8575b610aaf81836110d8565b81010312610ac4575191849190610a4e610a27565b8880fd5b503d610aa5565b86513d8b823e3d90fd5b610af591503d808a833e610aed81836110d8565b81019061127e565b886108dd565b85513d8a823e3d90fd5b90503461019d57602036600319011261019d57610b20611252565b3560035580f35b903461029457826003193601126102945760015481516370a0823160e01b81523093810193909352602090839060249082906001600160a01b03165afa918215610bb3578392610b7c575b6020838351908152f35b9091506020813d8211610bab575b81610b97602093836110d8565b810103126102945760209250519083610b72565b3d9150610b8a565b81513d85823e3d90fd5b503461019d578160031936011261019d576020906002549051908152f35b3461029457602036600319011261029457610bf46110bd565b610bfc611252565b6001600160a01b0316918215610c295750506bffffffffffffffffffffffff60a01b600854161760085580f35b5163778e115760e01b8152fd5b503461019d578160031936011261019d5760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891610c73611252565b610c7b61133b565b610c8361133b565b835460ff60a01b1916600160a01b17845551338152a180f35b903461029457608036600319011261029457610cb66110bd565b9060249283359167ffffffffffffffff9283811161109e57610cdb903690840161112c565b60643584811161109a57610cf2903690850161112c565b6001600160a01b0395861694909390851561108b5786600854168451632d5e71fb60e21b815287848201528a818b81855afa908115611081578b91611067575b50805115908115610f8e575b50610f7e578451906325e016d360e11b825260209687838681855afa928c8415610f7357918993918d95610f37575b50610d949089519586948593849363e0bb933d60e01b85528d8c8601526044850190611196565b9183015203915afa908115610f01578a91610f1a575b5015610f0b578885610dbf84546044356112f8565b986001541660648b885194859384926323b872dd60e01b8452338a85015230908401528d60448401525af1908115610f01578a91610ee4575b5015610ed557610e266064610e0f6002548a6112f8565b048098610e1e82600554611321565b60055561132e565b97868a5260068652848a20610e3c8a8254611321565b905584519283860192831184841017610ec45750508392916001917fa6c1325e03b867ee45303c64111dc7e52670f1da44597390374b5210cda6508d969552888152610e9b858083019484865281875193828580945193849201611173565b8101600781520301902090518155019051151560ff80198354169116179055519384523393a480f35b634e487b7160e01b8b526041905289fd5b508251637024dad560e11b8152fd5b610efb9150863d881161058f5761058181836110d8565b8a610df8565b85513d8c823e3d90fd5b5082516366a70fa760e11b8152fd5b610f319150863d881161058f5761058181836110d8565b8a610daa565b9380929550849193503d8311610f6c575b610f5281836110d8565b81010312610f685790518a928892610d94610d6d565b8b80fd5b503d610f48565b8851903d90823e3d90fd5b84516351a846b160e11b81528390fd5b865163cb3e1fe760e01b8152602092509082828781875afa918d831561105c579084929193611025575b50610fde908d8a51948593849363e0bb933d60e01b85528d8c8601526044850190611196565b918301520381865afa91821561101b578c92610ffe575b5050158b610d3e565b6110149250803d1061058f5761058181836110d8565b8b80610ff5565b87513d8e823e3d90fd5b8281939294503d8311611055575b61103d81836110d8565b810103126110515751908290610fde610fb8565b8c80fd5b503d611033565b8951903d90823e3d90fd5b61107b91503d808d833e610aed81836110d8565b8b610d32565b86513d8d823e3d90fd5b50825163778e115760e01b8152fd5b8780fd5b8680fd5b91503461029457826003193601126102945760209250548152f35b600435906001600160a01b03821682036110d357565b600080fd5b90601f8019910116810190811067ffffffffffffffff8211176110fa57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116110fa57601f01601f191660200190565b81601f820112156110d35780359061114382611110565b9261115160405194856110d8565b828452602083830101116110d357816000926020809301838601378301015290565b60005b8381106111865750506000910152565b8181015183820152602001611176565b906020916111af81518092818552858086019101611173565b601f01601f1916010190565b346110d35760203660031901126110d3576111d46110bd565b600854604051632d5e71fb60e21b81526001600160a01b0392831660048201529160009183916024918391165afa8015611246576112299160009161122d575b50604051918291602083526020830190611196565b0390f35b611240913d8091833e610aed81836110d8565b38611214565b6040513d6000823e3d90fd5b6000546001600160a01b0316330361126657565b60405163118cdaa760e01b8152336004820152602490fd5b6020818303126110d35780519067ffffffffffffffff82116110d3570181601f820112156110d35780516112b181611110565b926112bf60405194856110d8565b818452602082840101116110d3576112dd9160208085019101611173565b90565b908160209103126110d3575180151581036110d35790565b8181029291811591840414171561130b57565b634e487b7160e01b600052601160045260246000fd5b9190820180921161130b57565b9190820391821161130b57565b60ff60005460a01c1661134a57565b60405163d93c066560e01b8152600490fd5b60ff60005460a01c161561136c57565b604051638dfc202b60e01b8152600490fdfea2646970667358221220278fbcd50a5e7bc20ad83e219a9b910724f40ad533c5b644ee10eafee0071b1564736f6c63430008140033";

type Compensation1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Compensation1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Compensation1__factory extends ContractFactory {
  constructor(...args: Compensation1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _provider: AddressLike,
    _tokenAddress: AddressLike,
    _serviceFeePercent: BigNumberish,
    _unitPrice: BigNumberish,
    _didAuthAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _provider,
      _tokenAddress,
      _serviceFeePercent,
      _unitPrice,
      _didAuthAddress,
      overrides || {}
    );
  }
  override deploy(
    _provider: AddressLike,
    _tokenAddress: AddressLike,
    _serviceFeePercent: BigNumberish,
    _unitPrice: BigNumberish,
    _didAuthAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _provider,
      _tokenAddress,
      _serviceFeePercent,
      _unitPrice,
      _didAuthAddress,
      overrides || {}
    ) as Promise<
      Compensation1 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Compensation1__factory {
    return super.connect(runner) as Compensation1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Compensation1Interface {
    return new Interface(_abi) as Compensation1Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Compensation1 {
    return new Contract(address, _abi, runner) as unknown as Compensation1;
  }
}
