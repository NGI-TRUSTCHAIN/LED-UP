/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { DidVerifier, DidVerifierInterface } from "../../src/DidVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_didRegistryAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DidVerifier__InvalidCredential",
    type: "error",
  },
  {
    inputs: [],
    name: "DidVerifier__InvalidIssuer",
    type: "error",
  },
  {
    inputs: [],
    name: "DidVerifier__UntrustedIssuer",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "credentialType",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "issuer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "trusted",
        type: "bool",
      },
    ],
    name: "IssuerTrustStatusUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "credentialType",
        type: "string",
      },
      {
        internalType: "address",
        name: "issuer",
        type: "address",
      },
    ],
    name: "isIssuerTrusted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "credentialType",
        type: "string",
      },
      {
        internalType: "address",
        name: "issuer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "trusted",
        type: "bool",
      },
    ],
    name: "setIssuerTrustStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "credentialType",
        type: "string",
      },
      {
        internalType: "address",
        name: "issuer",
        type: "address",
      },
      {
        internalType: "string",
        name: "subject",
        type: "string",
      },
    ],
    name: "verifyCredential",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461007457601f61043f38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b0319169190911790556040516103af90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c9081631e5eeaa81461019e5750806362a260951461012b5763c5d3dfdc1461004657600080fd5b3461012757606036600319011261012757823567ffffffffffffffff811161012357610075903690850161030f565b909161007f610342565b6044359081151580920361011f576001600160a01b0316918215610110577fd2e1d4f584e888810ad1218b5e66bca9f700e1f9a65274148eb7d9055692fead959650805184868237602081868101600181520301902083885260205280872060ff1981541660ff84161790556101018151958695606087526060870191610358565b9260208501528301520390a180f35b51636e26482160e11b81528690fd5b8580fd5b8280fd5b5080fd5b508234610123578160031936011261012357803567ffffffffffffffff811161019a5760209361016160ff93859336910161030f565b8661016a610342565b9282865193849283376001908201908152030190206001600160a01b039091168252855220549151911615158152f35b8380fd5b849291503461019a57606036600319011261019a5767ffffffffffffffff938335858111610127576101d3903690860161030f565b6101de939193610342565b916044358881116102e6579060208189818061022b6102028b99983690860161030f565b995463c8902a2160e01b84529483018790526001600160a01b0399948a16946024840191610358565b03915afa908115610305578798998698979892610297575b50501561028757602060ff96828751938492833781016001815203019020911682526020522054161561027a576020905160018152f35b51636e5d524560e11b8152fd5b8451630967603b60e31b81528890fd5b91509192939495506020903d6020116102fd575b601f8201601f19168301908111838210176102ea5760209183918a52810103126102e6575180151581036102e6579086949392918980610243565b8480fd5b634e487b7160e01b875260418a52602487fd5b3d91506102ab565b87513d87823e3d90fd5b9181601f8401121561033d5782359167ffffffffffffffff831161033d576020838186019501011161033d57565b600080fd5b602435906001600160a01b038216820361033d57565b908060209392818452848401376000828201840152601f01601f191601019056fea264697066735822122018b017954a0e64e68d14baa468e934d3731e8f8f7aaa7eded2bbb6dcb7befe6d64736f6c63430008140033";

type DidVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DidVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DidVerifier__factory extends ContractFactory {
  constructor(...args: DidVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _didRegistryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_didRegistryAddress, overrides || {});
  }
  override deploy(
    _didRegistryAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_didRegistryAddress, overrides || {}) as Promise<
      DidVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DidVerifier__factory {
    return super.connect(runner) as DidVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DidVerifierInterface {
    return new Interface(_abi) as DidVerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DidVerifier {
    return new Contract(address, _abi, runner) as unknown as DidVerifier;
  }
}
