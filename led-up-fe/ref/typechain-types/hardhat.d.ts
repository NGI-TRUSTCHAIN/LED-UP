/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "AccessManaged",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessManaged__factory>;
    getContractFactory(
      name: "IAccessManaged",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessManaged__factory>;
    getContractFactory(
      name: "IAccessManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessManager__factory>;
    getContractFactory(
      name: "IAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthority__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "Compensation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Compensation__factory>;
    getContractFactory(
      name: "Compensation1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Compensation1__factory>;
    getContractFactory(
      name: "ConsentManagement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConsentManagement__factory>;
    getContractFactory(
      name: "DataAccess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DataAccess__factory>;
    getContractFactory(
      name: "DataRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DataRegistry__factory>;
    getContractFactory(
      name: "DataRegistry1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DataRegistry1__factory>;
    getContractFactory(
      name: "DataSharing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DataSharing__factory>;
    getContractFactory(
      name: "DidAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidAccessControl__factory>;
    getContractFactory(
      name: "DidAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidAuth__factory>;
    getContractFactory(
      name: "DidAuth1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidAuth1__factory>;
    getContractFactory(
      name: "DidIssuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidIssuer__factory>;
    getContractFactory(
      name: "DidRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidRegistry__factory>;
    getContractFactory(
      name: "DidVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidVerifier__factory>;
    getContractFactory(
      name: "ICompensation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICompensation__factory>;
    getContractFactory(
      name: "ICompensation1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICompensation1__factory>;
    getContractFactory(
      name: "IDataRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDataRegistry__factory>;
    getContractFactory(
      name: "Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Utils__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;

    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "AccessManaged",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessManaged>;
    getContractAt(
      name: "IAccessManaged",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessManaged>;
    getContractAt(
      name: "IAccessManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessManager>;
    getContractAt(
      name: "IAuthority",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthority>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "Compensation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Compensation>;
    getContractAt(
      name: "Compensation1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Compensation1>;
    getContractAt(
      name: "ConsentManagement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConsentManagement>;
    getContractAt(
      name: "DataAccess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DataAccess>;
    getContractAt(
      name: "DataRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DataRegistry>;
    getContractAt(
      name: "DataRegistry1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DataRegistry1>;
    getContractAt(
      name: "DataSharing",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DataSharing>;
    getContractAt(
      name: "DidAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DidAccessControl>;
    getContractAt(
      name: "DidAuth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DidAuth>;
    getContractAt(
      name: "DidAuth1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DidAuth1>;
    getContractAt(
      name: "DidIssuer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DidIssuer>;
    getContractAt(
      name: "DidRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DidRegistry>;
    getContractAt(
      name: "DidVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DidVerifier>;
    getContractAt(
      name: "ICompensation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICompensation>;
    getContractAt(
      name: "ICompensation1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICompensation1>;
    getContractAt(
      name: "IDataRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDataRegistry>;
    getContractAt(
      name: "Utils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Utils>;
    getContractAt(
      name: "Token",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;

    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "AccessManaged",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessManaged>;
    deployContract(
      name: "IAccessManaged",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessManaged>;
    deployContract(
      name: "IAccessManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessManager>;
    deployContract(
      name: "IAuthority",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAuthority>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "Compensation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Compensation>;
    deployContract(
      name: "Compensation1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Compensation1>;
    deployContract(
      name: "ConsentManagement",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConsentManagement>;
    deployContract(
      name: "DataAccess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataAccess>;
    deployContract(
      name: "DataRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataRegistry>;
    deployContract(
      name: "DataRegistry1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataRegistry1>;
    deployContract(
      name: "DataSharing",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataSharing>;
    deployContract(
      name: "DidAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidAccessControl>;
    deployContract(
      name: "DidAuth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidAuth>;
    deployContract(
      name: "DidAuth1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidAuth1>;
    deployContract(
      name: "DidIssuer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidIssuer>;
    deployContract(
      name: "DidRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidRegistry>;
    deployContract(
      name: "DidVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidVerifier>;
    deployContract(
      name: "ICompensation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICompensation>;
    deployContract(
      name: "ICompensation1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICompensation1>;
    deployContract(
      name: "IDataRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDataRegistry>;
    deployContract(
      name: "Utils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Utils>;
    deployContract(
      name: "Token",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Token>;

    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "AccessManaged",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessManaged>;
    deployContract(
      name: "IAccessManaged",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessManaged>;
    deployContract(
      name: "IAccessManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessManager>;
    deployContract(
      name: "IAuthority",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAuthority>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "Compensation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Compensation>;
    deployContract(
      name: "Compensation1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Compensation1>;
    deployContract(
      name: "ConsentManagement",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConsentManagement>;
    deployContract(
      name: "DataAccess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataAccess>;
    deployContract(
      name: "DataRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataRegistry>;
    deployContract(
      name: "DataRegistry1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataRegistry1>;
    deployContract(
      name: "DataSharing",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataSharing>;
    deployContract(
      name: "DidAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidAccessControl>;
    deployContract(
      name: "DidAuth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidAuth>;
    deployContract(
      name: "DidAuth1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidAuth1>;
    deployContract(
      name: "DidIssuer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidIssuer>;
    deployContract(
      name: "DidRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidRegistry>;
    deployContract(
      name: "DidVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidVerifier>;
    deployContract(
      name: "ICompensation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICompensation>;
    deployContract(
      name: "ICompensation1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICompensation1>;
    deployContract(
      name: "IDataRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDataRegistry>;
    deployContract(
      name: "Utils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Utils>;
    deployContract(
      name: "Token",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Token>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
