// enhanced_fhir_verifier.zok
// Enhanced FHIR verification circuit that supports:
// 1. Extended resource types (16 types)
// 2. Enhanced field validation

import "hashes/sha256/512bitPacked" as sha256packed;

// FHIR Resource Types (encoded as field values)
// 1: Patient, 2: Observation, 3: MedicationRequest, 4: Condition
// 5: Procedure, 6: Encounter, 7: DiagnosticReport, 8: CarePlan
// 9: Immunization, 10: AllergyIntolerance, 11: Device, 12: Organization
// 13: Practitioner, 14: Location, 15: Medication, 16: Coverage

// Extended FHIR resource type validation
def validate_resource_type(field resourceType) -> field {
    return if resourceType >= 1 && resourceType <= 16 { 1 } else { 0 };
}

// Field presence validation by resource type
def validate_required_fields(field resourceType, field[8] resourceData) -> field {
    field hasIdentifier = if resourceData[1] != 0 { 1 } else { 0 };
    field hasName = if resourceData[2] != 0 { 1 } else { 0 };
    field hasSubject = if resourceData[1] != 0 { 1 } else { 0 };
    field hasCode = if resourceData[2] != 0 { 1 } else { 0 };
    field hasValue = if resourceData[3] != 0 { 1 } else { 0 };
    field hasMedication = if resourceData[1] != 0 { 1 } else { 0 };
    
    field valid = if resourceType == 1 {
        hasIdentifier * hasName
    } else {
        if resourceType == 2 {
            hasSubject * hasCode * hasValue
        } else {
            if resourceType == 3 {
                hasMedication * hasSubject
            } else {
                if resourceType == 4 {
                    hasSubject * hasCode
                } else {
                    if resourceData[1] != 0 { 1 } else { 0 }
                }
            }
        }
    };

    return valid;
}

// Enhanced main function with basic validation
def main(
    private field[8] resourceData,
    field resourceType,
    field[2] expectedHash,
    field verificationMode
) -> field {
    // Basic validation for all modes
    field typeValid = validate_resource_type(resourceType) * if resourceData[0] == resourceType { 1 } else { 0 };
    
    // Hash validation
    field[4] dataChunk1 = [resourceData[0], resourceData[1], resourceData[2], resourceData[3]];
    field[2] dataHash1 = sha256packed(dataChunk1);
    field[4] dataChunk2 = [resourceData[4], resourceData[5], resourceData[6], resourceData[7]];
    field[2] dataHash2 = sha256packed(dataChunk2);
    field[4] combinedHash = [dataHash1[0], dataHash1[1], dataHash2[0], dataHash2[1]];
    field[2] finalHash = sha256packed(combinedHash);
    
    field hashValid = if finalHash[0] == expectedHash[0] && finalHash[1] == expectedHash[1] { 1 } else { 0 };
    
    // Required fields validation
    field fieldsValid = validate_required_fields(resourceType, resourceData);
    
    // Check for type validation error
    field isTypeError = if typeValid == 0 { 1 } else { 0 };
    
    // Check for hash validation error
    field isHashError = if typeValid == 1 && hashValid == 0 { 1 } else { 0 };
    
    // Check for fields validation error
    field isFieldsError = if typeValid == 1 && hashValid == 1 && fieldsValid == 0 { 1 } else { 0 };
    
    // Check for success
    field isSuccess = if typeValid == 1 && hashValid == 1 && fieldsValid == 1 { 1 } else { 0 };
    
    // Calculate final result
    field result = isSuccess * 1 + 
                   isTypeError * 2 + 
                   isHashError * 3 + 
                   isFieldsError * 4;
    
    return result;
} 
