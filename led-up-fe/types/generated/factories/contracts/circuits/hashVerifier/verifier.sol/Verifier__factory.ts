/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Verifier,
  VerifierInterface,
} from "../../../../../contracts/circuits/hashVerifier/verifier.sol/Verifier";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "a",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "X",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "Y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "b",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "c",
            type: "tuple",
          },
        ],
        internalType: "struct Verifier.Proof",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "uint256[2]",
        name: "input",
        type: "uint256[2]",
      },
    ],
    name: "verifyTx",
    outputs: [
      {
        internalType: "bool",
        name: "r",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610dfa908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c6343cd76fc1461002757600080fd5b346100c157366003190161014081126100c157610100136100c15761004a6100dc565b61005336610147565b815260803660431901126100c1576100ab6100bd91610070610101565b6100793661018f565b8152610084366101cc565b602082015260208201526100973661016b565b60408201526100a536610209565b906102fb565b60405190151581529081906020820190565b0390f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b604051906060820182811067ffffffffffffffff8211176100fc57604052565b6100c6565b604051906040820182811067ffffffffffffffff8211176100fc57604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176100fc57604052565b60409060031901126100c15761015b610101565b9060043582526024356020830152565b60409060c31901126100c15761017f610101565b9060c435825260e4356020830152565b80606312156100c1576101a26040610121565b80916084116100c1576044905b608482106101bc57505090565b81358152602091820191016101af565b8060a312156100c1576101df6040610121565b809160c4116100c1576084905b60c482106101f957505090565b81358152602091820191016101ec565b8061012312156100c15761021d6040610121565b8091610144116100c157610104905b610144821061023a57505090565b813581526020918201910161022c565b67ffffffffffffffff81116100fc5760051b60200190565b9061027461026f8361024a565b610121565b8281528092610285601f199161024a565b0190602036910137565b634e487b7160e01b600052603260045260246000fd5b8051156102b25760200190565b61028f565b8051600110156102b25760400190565b8051600210156102b25760600190565b8051600310156102b25760800190565b80518210156102b25760209160051b010190565b906103066060610121565b6002815292604036602086013760005b600281101561033a576001908060051b84015161033382886102e7565b5201610316565b50926103479291506103bd565b61035057600190565b600090565b634e487b7160e01b600052601160045260246000fd5b906001820180921161037957565b610355565b906002820180921161037957565b906003820180921161037957565b906004820180921161037957565b906005820180921161037957565b156100c157565b9190916103c8610618565b916103d3825161036b565b906103e56080850192835151146103b6565b6103ed610101565b6000815260006020820152946000955b8451871015610478576104706001916104417f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161043a8b8a6102e7565b51106103b6565b61046a61045887516104528c61036b565b906102e7565b516104638b8a6102e7565b51906109e5565b90610a33565b9601956103fd565b6104dc959296506104d894506104926104999294516102a5565b5190610a33565b8251926104aa602082015192610a91565b906104bc604080860151920151610a91565b9160608501519360206104cf8751610a91565b96015196610b5a565b1590565b6104e557600090565b600190565b6020906104f682610121565b91368337565b610504610101565b90604061051081610121565b81368237835261051f81610121565b903682376020830152565b6040519060a0820182811067ffffffffffffffff8211176100fc576040526060608083610555610101565b6000815260006020820152815261056a6104fc565b60208201526105776104fc565b60408201526105846104fc565b838201520152565b60809061059882610121565b6003815291601f19018260005b8281106105b157505050565b6020906105bc610101565b60008152600083820152828285010152016105a5565b60a0906105de82610121565b6004815291601f19018260005b8281106105f757505050565b602090610602610101565b60008152600083820152828285010152016105eb565b61062061052a565b90610629610101565b7f249e5a5daf0ce286f4112d65b5df8ee2f73dd0808d64315db6aa424a0709db8181527f171bdcfa5562b130f5829f0850d6be58f85db056263bfa773818639c66297af160208201528252604061067f81610121565b7f0b7ddaa6001e8703b8a8b060244a818fd4bb38db649b193f6139f2f3ebb92a8f81527f14115ea97e772630c7b8461f4b3ceae8c81f9c1bdf2bb09e60a9883c75ae7e3060208201526106d182610121565b7f2c02d911cf2a2525278ddab34054e9436e7b68443c4db46143d7f99110fe9c1481527e9cac934a9a6be49d846682baae70c9cee324338c4a17d923bc8b4b226d8f996020820152610721610101565b9182526020820152602084015261073781610121565b7f22d436250464422111903bfd51b31efb323adabf2040092c8c192858a85043fa81527f16e4658b6039ef18369f168af6c316113ba098541a36f0cac1d494b6a9989f0e602082015261078982610121565b7f015b5f555abcae4b1bd1ddf7f2b1897d19b33e58dc7a28cb2262a2580f59568f81527f142a46441a415770d3e0dd9cb1d154ef00c96c916bdc88cd9c5707254855dbdf60208201526107da610101565b9182526020820152818401526108416107f282610121565b917f0f8e9cc4a9a3a6a83bfce418d5df59f2aac46c9e200cd1601721931af7cbc86883527f261f00dbfe579dbfc48febb1e2c72982ac28b455cc14212123cbc4c81109bba86020840152610121565b7f19b09db2e8e82f139ffe3d32fd7fa69fd927b0295a7f96a749998977531daa0281527f04507506da1e1b5b790868b7a980b124432549383c74812f0e38115b9be6eaa86020820152610892610101565b918252602082015260608301526109e26108aa61058c565b608084019081526109176108bc610101565b7f2931eedcb4c2befc920ac099b7e127bfa183d53636d4163ae4540ea04005f9fe81527f0f3558ae6ea46a8cb83fe74b65776797d3fa5d2ace80eaf805ca92a1cb0d601d6020820152825190610911826102a5565b526102a5565b5061097e610923610101565b7f302f0ada97721b06015aa3e8eebf711a34b5cb1d7b6a1780de854b7ead06342481527f0bd2fc9c52e44fdceb6b8f84f94f14ebc14ad9dc4dd305966d2fe994dea44f926020820152825190610978826102b7565b526102b7565b50610987610101565b907f2e6fe2788e4aa5b8b26761f0c6dde92cf90c9892ccc0efa5e14e3d068c18a2e882527f0e3550776a7af687eba7ac030ec40e9281be5b733e12f3168c60c4a471af46a8602083015251906109dc826102c7565b526102c7565b50565b91906109ef610101565b6000815260006020820152608081946060936020610a0c86610121565b92863685378051845201516020830152604082015260076107cf195a01fa15610a3157565bfe5b60609092919260c0610a43610101565b9160008352600060208401526020839681610a5e6080610121565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa8015610a3157156100c157565b610a99610101565b60008152600060208201525080511580610b4e575b610b37577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208251920151067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811161037957610b2c610101565b918252602082015290565b50610b40610101565b600081526000602082015290565b50602081015115610aae565b97969394929195610b696105d2565b95610b7460a0610121565b6004815297608060005b818110610c34575050610c31999a610b95896102a5565b52610b9f886102a5565b50610ba9886102b7565b52610bb3876102b7565b50610bbd876102c7565b52610bc7866102c7565b50610bd1866102d7565b52610bdb856102d7565b50610be5866102a5565b52610bef856102a5565b50610bf9856102b7565b52610c03846102b7565b50610c0d846102c7565b52610c17836102c7565b50610c21836102d7565b52610c2b826102d7565b50610c62565b90565b808b60208093610c426104fc565b9201015201610b7e565b9060068202918083046006149015171561037957565b908151610c71825182146103b6565b610c7a81610c4c565b92610c8484610262565b9260005b838110610cc657505050506020918291610ca06104ea565b93849260051b910160086107cf195a01fa8015610a3157610cc0906103b6565b51151590565b80610cd3600192856102e7565b5151610cde82610c4c565b90610ceb600092896102e7565b526020610cf883876102e7565b510151610d15610d0f610d0a85610c4c565b61036b565b896102e7565b52610d2b610d2383866102e7565b515160200190565b51610d40610d0f610d3b85610c4c565b61037e565b52610d4b82856102e7565b515151610d62610d0f610d5d85610c4c565b61038c565b52610d7b6020610d7284876102e7565b51015160200190565b51610d90610d0f610d8b85610c4c565b61039a565b526020610d9d83866102e7565b510151905051610dbd610db7610db284610c4c565b6103a8565b886102e7565b5201610c8856fea2646970667358221220b921417eebac6fa0e9fd6c5537426a741a0ffafb18fe0b350a399df94c499ac164736f6c634300081c0033";

type VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verifier__factory extends ContractFactory {
  constructor(...args: VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Verifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Verifier__factory {
    return super.connect(runner) as Verifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierInterface {
    return new Interface(_abi) as VerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Verifier {
    return new Contract(address, _abi, runner) as unknown as Verifier;
  }
}
