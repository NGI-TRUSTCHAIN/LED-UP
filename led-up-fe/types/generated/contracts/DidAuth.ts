/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DidAuthInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONSUMER_CREDENTIAL"
      | "CONSUMER_ROLE"
      | "PRODUCER_CREDENTIAL"
      | "PRODUCER_ROLE"
      | "SERVICE_PROVIDER_CREDENTIAL"
      | "SERVICE_PROVIDER_ROLE"
      | "accessControl"
      | "authenticate"
      | "didIssuer"
      | "didRegistry"
      | "didVerifier"
      | "getDid"
      | "getRequiredCredentialForRole"
      | "hasRequiredRolesAndCredentials"
      | "verifyCredentialForAction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthenticationFailed"
      | "AuthenticationSuccessful"
      | "CredentialVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONSUMER_CREDENTIAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONSUMER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRODUCER_CREDENTIAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRODUCER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SERVICE_PROVIDER_CREDENTIAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SERVICE_PROVIDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authenticate",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "didIssuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "didRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "didVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getDid", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getRequiredCredentialForRole",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRequiredRolesAndCredentials",
    values: [string, BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCredentialForAction",
    values: [string, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONSUMER_CREDENTIAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONSUMER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRODUCER_CREDENTIAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRODUCER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SERVICE_PROVIDER_CREDENTIAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SERVICE_PROVIDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "didRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredCredentialForRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRequiredRolesAndCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCredentialForAction",
    data: BytesLike
  ): Result;
}

export namespace AuthenticationFailedEvent {
  export type InputTuple = [
    did: string,
    role: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [did: string, role: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    role: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthenticationSuccessfulEvent {
  export type InputTuple = [
    did: string,
    role: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [did: string, role: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    role: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialVerifiedEvent {
  export type InputTuple = [
    did: string,
    credentialType: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    did: string,
    credentialType: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    did: string;
    credentialType: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DidAuth extends BaseContract {
  connect(runner?: ContractRunner | null): DidAuth;
  waitForDeployment(): Promise<this>;

  interface: DidAuthInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONSUMER_CREDENTIAL: TypedContractMethod<[], [string], "view">;

  CONSUMER_ROLE: TypedContractMethod<[], [string], "view">;

  PRODUCER_CREDENTIAL: TypedContractMethod<[], [string], "view">;

  PRODUCER_ROLE: TypedContractMethod<[], [string], "view">;

  SERVICE_PROVIDER_CREDENTIAL: TypedContractMethod<[], [string], "view">;

  SERVICE_PROVIDER_ROLE: TypedContractMethod<[], [string], "view">;

  accessControl: TypedContractMethod<[], [string], "view">;

  authenticate: TypedContractMethod<
    [did: string, role: BytesLike],
    [boolean],
    "view"
  >;

  didIssuer: TypedContractMethod<[], [string], "view">;

  didRegistry: TypedContractMethod<[], [string], "view">;

  didVerifier: TypedContractMethod<[], [string], "view">;

  getDid: TypedContractMethod<[_address: AddressLike], [string], "view">;

  getRequiredCredentialForRole: TypedContractMethod<
    [role: BytesLike],
    [string],
    "view"
  >;

  hasRequiredRolesAndCredentials: TypedContractMethod<
    [did: string, roles: BytesLike[], credentialIds: BytesLike[]],
    [boolean],
    "view"
  >;

  verifyCredentialForAction: TypedContractMethod<
    [did: string, credentialType: string, credentialId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONSUMER_CREDENTIAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CONSUMER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRODUCER_CREDENTIAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRODUCER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SERVICE_PROVIDER_CREDENTIAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SERVICE_PROVIDER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accessControl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authenticate"
  ): TypedContractMethod<[did: string, role: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "didIssuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "didRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "didVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDid"
  ): TypedContractMethod<[_address: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRequiredCredentialForRole"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "hasRequiredRolesAndCredentials"
  ): TypedContractMethod<
    [did: string, roles: BytesLike[], credentialIds: BytesLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyCredentialForAction"
  ): TypedContractMethod<
    [did: string, credentialType: string, credentialId: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "AuthenticationFailed"
  ): TypedContractEvent<
    AuthenticationFailedEvent.InputTuple,
    AuthenticationFailedEvent.OutputTuple,
    AuthenticationFailedEvent.OutputObject
  >;
  getEvent(
    key: "AuthenticationSuccessful"
  ): TypedContractEvent<
    AuthenticationSuccessfulEvent.InputTuple,
    AuthenticationSuccessfulEvent.OutputTuple,
    AuthenticationSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "CredentialVerified"
  ): TypedContractEvent<
    CredentialVerifiedEvent.InputTuple,
    CredentialVerifiedEvent.OutputTuple,
    CredentialVerifiedEvent.OutputObject
  >;

  filters: {
    "AuthenticationFailed(string,bytes32,uint256)": TypedContractEvent<
      AuthenticationFailedEvent.InputTuple,
      AuthenticationFailedEvent.OutputTuple,
      AuthenticationFailedEvent.OutputObject
    >;
    AuthenticationFailed: TypedContractEvent<
      AuthenticationFailedEvent.InputTuple,
      AuthenticationFailedEvent.OutputTuple,
      AuthenticationFailedEvent.OutputObject
    >;

    "AuthenticationSuccessful(string,bytes32,uint256)": TypedContractEvent<
      AuthenticationSuccessfulEvent.InputTuple,
      AuthenticationSuccessfulEvent.OutputTuple,
      AuthenticationSuccessfulEvent.OutputObject
    >;
    AuthenticationSuccessful: TypedContractEvent<
      AuthenticationSuccessfulEvent.InputTuple,
      AuthenticationSuccessfulEvent.OutputTuple,
      AuthenticationSuccessfulEvent.OutputObject
    >;

    "CredentialVerified(string,string,uint256)": TypedContractEvent<
      CredentialVerifiedEvent.InputTuple,
      CredentialVerifiedEvent.OutputTuple,
      CredentialVerifiedEvent.OutputObject
    >;
    CredentialVerified: TypedContractEvent<
      CredentialVerifiedEvent.InputTuple,
      CredentialVerifiedEvent.OutputTuple,
      CredentialVerifiedEvent.OutputObject
    >;
  };
}
